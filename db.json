{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"source/img/avatar.webp","path":"img/avatar.webp","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/huancun.md","hash":"e94dcbd654986ec3182a800b294ec5e9d8c5b99c","modified":1614585522386},{"_id":"source/_posts/webpack hotModuleReplacement原理.md","hash":"1a7dfc5c8c7e01b10a1b5c0ccc056d21072aae25","modified":1626059466685},{"_id":"source/_posts/markdown语法.md","hash":"f72c64464c1ffa69dc864e3e45c438192a829f0c","modified":1615799884298},{"_id":"source/_posts/webpack_loader_plugin.md","hash":"cfb81bf99b39ee63f10b045dfffe6830e55028a9","modified":1618476786256},{"_id":"source/_posts/node_child_process.md","hash":"7c19cee30d8a9068ec93fa3b24944df86411f101","modified":1615799276347},{"_id":"themes/hexo-theme-obsidian-master/CHANGELOG_CN.md","hash":"60884ab58e4f5681f87c5dc8d0148a1c836d17a5","modified":1614580422867},{"_id":"themes/hexo-theme-obsidian-master/CHANGELOG.md","hash":"7352ea55fdc6317169b02b52e59c81d77bb2ff0d","modified":1614580422501},{"_id":"themes/hexo-theme-obsidian-master/.prettierignore","hash":"36612689c3688127ca3a5fdfba0d22dfc306b386","modified":1614580422501},{"_id":"themes/hexo-theme-obsidian-master/.gitignore","hash":"17af13fb332a7f2313e6669ca97e95296a1a7126","modified":1614580422501},{"_id":"themes/hexo-theme-obsidian-master/_config.yml","hash":"029403c48b1d2ffcc403d1ae0e923c9989b7d881","modified":1615800879471},{"_id":"themes/hexo-theme-obsidian-master/LICENSE","hash":"5433bef2c6c055447443802b3538cf37adabd705","modified":1614580427002},{"_id":"themes/hexo-theme-obsidian-master/package.json","hash":"58dff57dc13b339fe6d749f97dbfb4828375f3a8","modified":1614580427196},{"_id":"themes/hexo-theme-obsidian-master/package-lock.json","hash":"65b2d05eeab89fbb11dea248835d2e5c58659a9e","modified":1614580427127},{"_id":"themes/hexo-theme-obsidian-master/languages/default.yml","hash":"64f341736b8cfa05a0cc6cce51b0722dbf0ad32b","modified":1614580423003},{"_id":"themes/hexo-theme-obsidian-master/languages/fr.yml","hash":"a3bc76db5b6a644d3f777220fe7af395441b1c11","modified":1614580423650},{"_id":"themes/hexo-theme-obsidian-master/languages/it.yml","hash":"edd4a16f80f2ae83ef8e537cecf2fc0d7fab89c8","modified":1614580423609},{"_id":"themes/hexo-theme-obsidian-master/languages/nl.yml","hash":"3344fbf73157deaccd8b87b500efe21d9a94cbc7","modified":1614580423180},{"_id":"themes/hexo-theme-obsidian-master/languages/no.yml","hash":"d972e7bef0630528747e66ac3a79d4a1dc0bf543","modified":1614580423612},{"_id":"themes/hexo-theme-obsidian-master/languages/ru.yml","hash":"a2f6020c6a4f687a1d6a9b582a134f72a0381c62","modified":1614580423650},{"_id":"themes/hexo-theme-obsidian-master/languages/zh-CN.yml","hash":"07eacfc9c19f9d9aa20e793b6a7a0e56497037f8","modified":1614580423728},{"_id":"themes/hexo-theme-obsidian-master/languages/zh-TW.yml","hash":"31090af93079a84129f6b65303b75f9d3d8f46e1","modified":1614580424092},{"_id":"themes/hexo-theme-obsidian-master/layout/archive.ejs","hash":"17eb8f480c30e1de60e5f696942c697e20dc6d3a","modified":1614580425117},{"_id":"themes/hexo-theme-obsidian-master/layout/category.ejs","hash":"e0c36bded984989c864227801dcd289207241f76","modified":1614580425152},{"_id":"themes/hexo-theme-obsidian-master/layout/index.ejs","hash":"7873010b22819f17b08c67edb60fa01fba94589c","modified":1614580425153},{"_id":"themes/hexo-theme-obsidian-master/layout/layout.ejs","hash":"b093e9ee6e6a051fcbf46bc2a0fa06269803b0df","modified":1614580425187},{"_id":"themes/hexo-theme-obsidian-master/layout/page.ejs","hash":"db7051aba9f46e48808236a3887d440d2369d74e","modified":1614580425220},{"_id":"themes/hexo-theme-obsidian-master/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1614580425965},{"_id":"themes/hexo-theme-obsidian-master/layout/tag.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1614580425872},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/categories.ejs","hash":"db45b83951cd4dca8b9f1fac289e0f38e13c3dc1","modified":1614580426035},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1614580426067},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/head.ejs","hash":"f449cb52444ff145690ad26dc5ba6d708573176c","modified":1614580426196},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1614580426099},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/mathjax.ejs","hash":"3aae1c6eb8795525090f83b4e2ab00a1c04db13d","modified":1614580425972},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/menu.ejs","hash":"34c14e4d39fda3f4b0f6ec7e393529ebb33c1139","modified":1614580426297},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1614580426630},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/photoswipe.ejs","hash":"9cd0571569a37aef1c6c4a5bf074dc1dc7b0558b","modified":1614580426300},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/screen.ejs","hash":"919c1a9ab04ba22eac1e2e66f46e69b362dea93a","modified":1614580426908},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/scripts.ejs","hash":"eef3077d691c67c81138a07b5575dec8889134a8","modified":1614580426845},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/tags.ejs","hash":"fc037d52e956ed280d2d69f9683461ef86b5b453","modified":1614580427095},{"_id":"themes/hexo-theme-obsidian-master/scripts/helpers/hexo-html-truncate.js","hash":"72733931cbe4841f3da9a680e7549718f13bd0b7","modified":1614580427196},{"_id":"themes/hexo-theme-obsidian-master/scripts/helpers/hexo-symbols-count-time.js","hash":"dc213a7d2533f4624bd6c41217657c9ab4e9ce85","modified":1614580427642},{"_id":"themes/hexo-theme-obsidian-master/scripts/helpers/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1614580427576},{"_id":"themes/hexo-theme-obsidian-master/README.md","hash":"8c639d0d3aef123334f5f76d3c1aaaac66b486a2","modified":1614580427576},{"_id":"themes/hexo-theme-obsidian-master/README_CN.md","hash":"df92ed7fd3856291ecdc57f62f9fe53043e00799","modified":1614580427163},{"_id":"themes/hexo-theme-obsidian-master/.github/FUNDING.yml","hash":"46219c4d56bf5ed005a94216e2e5121b2597667c","modified":1614580422501},{"_id":"themes/hexo-theme-obsidian-master/source/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1614580431798},{"_id":"themes/hexo-theme-obsidian-master/source/css/theme.styl","hash":"7a3cda7d326995d7e16dc17c2201241525b89ba1","modified":1614580432771},{"_id":"themes/hexo-theme-obsidian-master/source/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1614580434176},{"_id":"themes/hexo-theme-obsidian-master/source/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1614580434234},{"_id":"themes/hexo-theme-obsidian-master/source/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1614580448639},{"_id":"themes/hexo-theme-obsidian-master/source/img/logo.png","hash":"956a5c90eba01360e5576178122cf29e3df1b3e4","modified":1614580437767},{"_id":"themes/hexo-theme-obsidian-master/source/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1614580441550},{"_id":"themes/hexo-theme-obsidian-master/source/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1614580447668},{"_id":"themes/hexo-theme-obsidian-master/source/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1614580447748},{"_id":"themes/hexo-theme-obsidian-master/source/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1614580441598},{"_id":"themes/hexo-theme-obsidian-master/source/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1614580448639},{"_id":"themes/hexo-theme-obsidian-master/source/js/obsidian.js","hash":"1a5fa7c32fefb814409e013519a61efefa76ccad","modified":1614580468890},{"_id":"themes/hexo-theme-obsidian-master/source/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1614580468890},{"_id":"themes/hexo-theme-obsidian-master/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1614580457991},{"_id":"themes/hexo-theme-obsidian-master/source/js/search.js","hash":"7dd6ada071decde02737645143d217906fe3fe80","modified":1614580448750},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/post/article.ejs","hash":"4d50b8ad15fcfb876de2df8c8bf4bb21dd15d67c","modified":1614580426466},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1614580426531},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/post/gitalk.ejs","hash":"512874f93fed1bd259df00acf0efa24afc6b9927","modified":1614580426299},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/post/header.ejs","hash":"95af4961efdc1421fc62b60075672cc49bc49a2c","modified":1614580426693},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/post/item.ejs","hash":"6b211ed210f25c1b3fe0e8903a332dd8161ba253","modified":1614580426667},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1614580426699},{"_id":"themes/hexo-theme-obsidian-master/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1614580426694},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/cheerio.js","hash":"df60e3da86341b0474f15d9aa8547d71617cb5a9","modified":1614580428296},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/parse.js","hash":"dc8dc6f82fd1c8f33eda9442025235a3632bfa36","modified":1614580431579},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/static.js","hash":"36ad488d734e0d9930d0a478deacebe6d5b8c775","modified":1614580429062},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/utils.js","hash":"425759c783010cd1d72771f2b8d471047a1e1285","modified":1614580428977},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/api/attributes.js","hash":"404a942475f8bf31dd4704d17490b25bfcdffb07","modified":1614580428977},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/api/css.js","hash":"de88fe4f6977eab77bf080d9a688cc3f2b0d516c","modified":1614580428977},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/api/forms.js","hash":"e9d8465f092ce6c2d2e48575bfa1de7e1cbaf3bd","modified":1614580428424},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/api/manipulation.js","hash":"93b36f7e67557d2a2f5ba65eee21a65f93c37b1f","modified":1614580427674},{"_id":"themes/hexo-theme-obsidian-master/scripts/libs/cheerio/api/traversing.js","hash":"5a83ea3c18f2e73eb1b4f4e4425de932e20d38bb","modified":1614580428893},{"_id":"themes/hexo-theme-obsidian-master/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1614580448518},{"_id":"themes/hexo-theme-obsidian-master/source/img/cat.png","hash":"e5de1f91126a515e7ada2ae2f9a2409872300399","modified":1615800851996},{"_id":"themes/hexo-theme-obsidian-master/source/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1614580433961},{"_id":"themes/hexo-theme-obsidian-master/source/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1614580447668},{"_id":"themes/hexo-theme-obsidian-master/source/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1614580441416},{"_id":"themes/hexo-theme-obsidian-master/source/css/codemirror.styl","hash":"b2e335244baf9703d2281eb41bbbf37ddf820713","modified":1614580432650},{"_id":"themes/hexo-theme-obsidian-master/source/css/obsidian.styl","hash":"519777788a0b7e1872a1cc05e634d8ce135a1d92","modified":1614580432523},{"_id":"themes/hexo-theme-obsidian-master/source/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1614580482944},{"_id":"public/2021/07/12/webpack hotModuleReplacement原理/index.html","hash":"3c3c0288781a6fb02961a0b0b3a674ae2f91f479","modified":1626060515602},{"_id":"public/2021/04/15/webpack_loader_plugin/index.html","hash":"6d13fab9faef2f41f7a588741ca306a8d0a747ba","modified":1626134948987},{"_id":"public/2021/03/15/markdown语法/index.html","hash":"e0bed470aabc00ed6f3c194a76fc21b230f3b558","modified":1626134948987},{"_id":"public/2021/03/15/node_child_process/index.html","hash":"129bf78e484efd2151d0ead0399bd5762115f59e","modified":1626134948987},{"_id":"public/2021/03/01/huancun/index.html","hash":"dc1de5264f0cd749ed7e7443903f5e0c652ada6e","modified":1626134948987},{"_id":"public/archives/index.html","hash":"c62039deb5727522c2bbc368aeee4950f32dee18","modified":1626134948987},{"_id":"public/archives/2021/index.html","hash":"93bd6111eab3996ec28eb867eda3a941c75f8213","modified":1626134948987},{"_id":"public/archives/2021/03/index.html","hash":"b9b25ada90219b40cbf1817a4d7345a7ddd2b6cb","modified":1626134948987},{"_id":"public/archives/2021/04/index.html","hash":"13b0bac26c4d581ba1153f9638d83f329b1cba0e","modified":1626134948987},{"_id":"public/archives/2021/07/index.html","hash":"77517bb1b2b9aa5a87e12d926caa74e0e1c88b33","modified":1626134948987},{"_id":"public/index.html","hash":"d421d0751f029f9e2e7e441071301fd121e215ca","modified":1626135438855},{"_id":"public/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1626060515602},{"_id":"public/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1626060515602},{"_id":"public/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1626060515602},{"_id":"public/img/logo.png","hash":"956a5c90eba01360e5576178122cf29e3df1b3e4","modified":1626060515602},{"_id":"public/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1626060515602},{"_id":"public/img/cat.png","hash":"e5de1f91126a515e7ada2ae2f9a2409872300399","modified":1626060515602},{"_id":"public/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1626060515602},{"_id":"public/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1626060515602},{"_id":"public/css/codemirror.css","hash":"d45967fa2b7e701c3d0dd62cdce0385f5c8f6961","modified":1626060515602},{"_id":"public/css/theme.css","hash":"0e5c3bdd7b08931209c816eab93ab1b62554d609","modified":1626060515602},{"_id":"public/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1626060515602},{"_id":"public/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1626060515602},{"_id":"public/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1626060515602},{"_id":"public/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1626060515602},{"_id":"public/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1626060515602},{"_id":"public/js/search.js","hash":"7dd6ada071decde02737645143d217906fe3fe80","modified":1626060515602},{"_id":"public/js/obsidian.js","hash":"1a5fa7c32fefb814409e013519a61efefa76ccad","modified":1626060515602},{"_id":"public/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1626060515602},{"_id":"public/css/obsidian.css","hash":"62822bfbc85e79250f4aef143e04dd5bc89b3ec9","modified":1626060515602},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1626133993757},{"_id":"public/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1626060515602},{"_id":"public/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1626060515602},{"_id":"public/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1626060515602},{"_id":"source/_posts/webpack_hotModuleReplacement原理.md","hash":"305b018be8981a872f59ea310317853283dddaa9","modified":1626060780641},{"_id":"public/2021/07/12/webpack_hotModuleReplacement原理/index.html","hash":"d7e03c08759b561a6fd2f2f52f6a29ce688208c2","modified":1626134948987},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626132861813},{"_id":"themes/hexo-theme-huxblog-master/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1626132860894},{"_id":"themes/hexo-theme-huxblog-master/README.md","hash":"712be94104bea7c84d861f4eb158ede4fc92dba2","modified":1626132861022},{"_id":"themes/hexo-theme-huxblog-master/_config.yml","hash":"17b6db6f20986d5a27ac84b1f945167eabbb97d4","modified":1626132861022},{"_id":"themes/hexo-theme-huxblog-master/package.json","hash":"dfc9e2a6c4aafb755ff94725cea758190767e917","modified":1626133365457},{"_id":"themes/hexo-theme-huxblog-master/scaffolds/draft.md","hash":"204ab550ddffa92051ea0eb2484a78d84dac3693","modified":1626132860420},{"_id":"themes/hexo-theme-huxblog-master/scaffolds/page.md","hash":"f0af1cb10f27d859caa51c8e3704469d9ed842a6","modified":1626132860420},{"_id":"themes/hexo-theme-huxblog-master/scaffolds/post.md","hash":"e7169dab8ce62d41e3734e30706fa786cc7d46f4","modified":1626132860424},{"_id":"themes/hexo-theme-huxblog-master/source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1626132861018},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/hello-2015.markdown","hash":"999910c6056e2f2d680e668fac2621db196cf7c0","modified":1626132860564},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/js-module-7day.markdown","hash":"e2ad67488d6e38c6844a7203f8c89918847c221f","modified":1626132860546},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/js-module-loader.markdown","hash":"a9bb15f756fed8464a52a5f7131336b27715a34d","modified":1626132860421},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/js-version.markdown","hash":"325424f7d638c817164b8e977ba2ef2b18876444","modified":1626132860638},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/unix-linux-note.markdown","hash":"4f9eefe870a1291f469eef2b2603357c3f1da924","modified":1626132860544},{"_id":"themes/hexo-theme-huxblog-master/source/about/index.md","hash":"900b72df10ceb5337e4be7bbb51d077a2b901ba4","modified":1626132860692},{"_id":"themes/hexo-theme-huxblog-master/source/archives/index.md","hash":"f30bcd9cd0fbe690c2398f21dbf27e56c0c72499","modified":1626132860765},{"_id":"themes/hexo-theme-huxblog-master/source/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1626132860869},{"_id":"themes/hexo-theme-huxblog-master/source/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1626132860659},{"_id":"themes/hexo-theme-huxblog-master/source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1626132860779},{"_id":"themes/hexo-theme-huxblog-master/source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1626132860680},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1626132861022},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1626132861908},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/js-version/keep-calm-and-learn-javascript.png","hash":"49ea101b92ce5e136a19e6b11162f8f4126fe01f","modified":1626132860614},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/js-version/post-bg-js-version.jpg","hash":"1598a1180c491f36b9036415b622bd9e5ad5d3bc","modified":1626132860627},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1626132861751},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1626132861751},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1626132861800},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1626132861718},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1626132861825},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1626132861718},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1626132861825},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1626132861908},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1626132861825},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1626132861140},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1626132861238},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1626132861165},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1626132861115},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1626132861176},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1626132861274},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1626132861176},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1626132861389},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1626132861165},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1626132861201},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/_partial/footer.ejs","hash":"e325a9953abc1a3751aa1a927bc3ecbdd627803a","modified":1626132861275},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/_partial/head.ejs","hash":"87c544a64ea49b835330135a616deb2e9fd39bbb","modified":1626132861275},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1626132861275},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1626132861298},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1626132861384},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1626132861457},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1626132861386},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1626132861685},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1626132861622},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1626132861674},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1626132861610},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1626132861599},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1626132861596},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1626132861501},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1626132861501},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1626132861501},{"_id":"themes/hexo-theme-huxblog-master/package-lock.json","hash":"a4141cd2de1f98608b5d4044e3addc0f5922a643","modified":1626133365539},{"_id":"themes/hexo-theme-huxblog-master/source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1626132860798},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/js-module-loader/post-bg-js-module.jpg","hash":"4a43bfa6b69c79a6ef90bd852fe5756d241733cd","modified":1626132860566},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/js-version/javascript-java.jpg","hash":"881e35e241a8be40f3c4e3a6f57d5402247c1eb3","modified":1626132860656},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/unix-linux-note/post-bg-unix-linux.jpg","hash":"e8f3739cb78ea6d1645665d07ebdb79881774fb6","modified":1626132860564},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1626132861405},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1626132861727},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1626132861526},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1626132861497},{"_id":"themes/hexo-theme-huxblog-master/source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1626132860917},{"_id":"themes/hexo-theme-huxblog-master/source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1626132860921},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1626132861406},{"_id":"themes/hexo-theme-huxblog-master/source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1626132860779},{"_id":"themes/hexo-theme-huxblog-master/source/_posts/hello-2015/post-bg-2015.jpg","hash":"7118d1af8ac638dc55ee63d0b17e704811c6a37a","modified":1626132860455},{"_id":"themes/hexo-theme-huxblog-master/themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1626132861636},{"_id":"themes/hexo-theme-huxblog-master/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1626132860891},{"_id":"themes/hexo-theme-huxblog-master/source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1626132860759},{"_id":"public/img/favicon.ico","hash":"a8ee7712f6560180efccb68546de6ea0d937fff3","modified":1626133515068},{"_id":"public/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1626133515068},{"_id":"public/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1626133515068},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1626133515068},{"_id":"public/404.html","hash":"9ef077ac5404a0678d304ff20aff285dfb933715","modified":1626133515068},{"_id":"public/about/index.html","hash":"614fcacb63dc88a3e6e7bb07ed206853a9692f11","modified":1626133515068},{"_id":"public/tags/index.html","hash":"bf8b363a75d5ab635aea7bf7e48b6a19b91b7fd6","modified":1626133515068},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1626133515068},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1626133515068},{"_id":"public/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1626133515068},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1626133515068},{"_id":"public/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1626133515068},{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626133940463},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1626133939742},{"_id":"themes/huxblog/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1626133940477},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1626133940428},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1626133940287},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1626133940477},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1626133940370},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1626133940393},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1626133940381},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1626133940414},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1626133940477},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1626133940393},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1626133939742},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1626133939851},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1626133939837},{"_id":"themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1626133939742},{"_id":"themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1626133939742},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1626133939851},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1626133939851},{"_id":"themes/huxblog/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1626133939958},{"_id":"themes/huxblog/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1626133939742},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1626133939850},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"29c3b4d0ece45278426ffa403db4b503008e4a0b","modified":1626134353609},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"87c544a64ea49b835330135a616deb2e9fd39bbb","modified":1626133939958},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1626133939957},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1626133939896},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1626133940060},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1626133940026},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1626133940064},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1626133940249},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1626133940288},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1626133940184},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1626133940284},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1626133940073},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1626133940272},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1626133940171},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1626133940172},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1626133940184},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1626133939969},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1626133940355},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1626133940177},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1626133940068},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1626133940108},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1626133940334},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1626133993757},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1626133993757},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1626133993757},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1626133993757},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1626133993757},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1626133993757},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1626133993757},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1626133993757},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1626133993757},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1626133993757},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1626133993757},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1626133993757},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1626133993757},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1626133993757},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1626133993757},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1626133993757},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1626133993757},{"_id":"source/img/avatar.webp","hash":"13e7652409a5d1660ca37a748e1eab1b1705d824","modified":1626135356158},{"_id":"public/img/avatar.webp","hash":"13e7652409a5d1660ca37a748e1eab1b1705d824","modified":1626135438855}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"缓存","_content":"\n# 强缓存\n## cache-control\nmax-age：number 相对值  第一次请求的时间和max-age设置的时间计算过期时间  再拿请求时间和过期时间对比确定是否走缓存\nno-cache: 不适用本地缓存，需要使用协商缓存\nno-store:禁止浏览器使用缓存，每次都会下载资源\npublic：可以被所有用户缓存，包括终端用户和CDN等代理服务器\nprivate:只能被终端的浏览器缓存\n## expires\n他的值是一个绝对时间的GMT时间格式的字符串，如果请求时间在expires之前本地缓存始终有效\n## 注意\n1.如果cache-control和expires同事存在  cache-control优先级较高\n2.Expires要求客户端和服务端的时钟严格同步\n\n\n# 协商缓存：有服务器决定资源是否缓存。响应头Last-Modified/请求头If-Modified-Since  响应头Etag/请求头If-None-Match 成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段\n## Last-Modified/If-Modified-Since 都是GMT时间格式的字符串\n1.浏览器第一次请求资源的时，在服务器返回资源的同时在response的header设置Last-Modified为资源在服务器上最后修改的时间\n\n2.浏览器再次请求资源时,resquest的header设置If-Modified-Since为上次response的header.Last-Modified的值\n\n3.浏览器再次请求资源时，对比If-Modified-Since和资源最后的修改时间，相同的话返回304（no Modified） 不会返回资源。也不会返回Last-Modified. 并从缓存读取资源\n\n4.如果缓存没有命中，重新请求资源，更新Last-Modified\n## Etag/If-None-Match\n都是由服务器生成的每个资源的唯一标识。只要资源有变化这个值就会变化。判断过程与Last-Modified/If-Modified-Since一致。不同的是返回304时 依旧会返回Etag\n## 注意\nLast-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。\n\n\n\n\n\n","source":"_posts/huancun.md","raw":"---\ntitle: 缓存\n---\n\n# 强缓存\n## cache-control\nmax-age：number 相对值  第一次请求的时间和max-age设置的时间计算过期时间  再拿请求时间和过期时间对比确定是否走缓存\nno-cache: 不适用本地缓存，需要使用协商缓存\nno-store:禁止浏览器使用缓存，每次都会下载资源\npublic：可以被所有用户缓存，包括终端用户和CDN等代理服务器\nprivate:只能被终端的浏览器缓存\n## expires\n他的值是一个绝对时间的GMT时间格式的字符串，如果请求时间在expires之前本地缓存始终有效\n## 注意\n1.如果cache-control和expires同事存在  cache-control优先级较高\n2.Expires要求客户端和服务端的时钟严格同步\n\n\n# 协商缓存：有服务器决定资源是否缓存。响应头Last-Modified/请求头If-Modified-Since  响应头Etag/请求头If-None-Match 成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段\n## Last-Modified/If-Modified-Since 都是GMT时间格式的字符串\n1.浏览器第一次请求资源的时，在服务器返回资源的同时在response的header设置Last-Modified为资源在服务器上最后修改的时间\n\n2.浏览器再次请求资源时,resquest的header设置If-Modified-Since为上次response的header.Last-Modified的值\n\n3.浏览器再次请求资源时，对比If-Modified-Since和资源最后的修改时间，相同的话返回304（no Modified） 不会返回资源。也不会返回Last-Modified. 并从缓存读取资源\n\n4.如果缓存没有命中，重新请求资源，更新Last-Modified\n## Etag/If-None-Match\n都是由服务器生成的每个资源的唯一标识。只要资源有变化这个值就会变化。判断过程与Last-Modified/If-Modified-Since一致。不同的是返回304时 依旧会返回Etag\n## 注意\nLast-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。\n\n\n\n\n\n","slug":"huancun","published":1,"date":"2021-03-01T07:58:42.386Z","updated":"2021-03-01T07:58:42.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr02g44f0000u005h3xg786t","content":"<h1 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h1><h2 id=\"cache-control\"><a href=\"#cache-control\" class=\"headerlink\" title=\"cache-control\"></a>cache-control</h2><p>max-age：number 相对值  第一次请求的时间和max-age设置的时间计算过期时间  再拿请求时间和过期时间对比确定是否走缓存<br>no-cache: 不适用本地缓存，需要使用协商缓存<br>no-store:禁止浏览器使用缓存，每次都会下载资源<br>public：可以被所有用户缓存，包括终端用户和CDN等代理服务器<br>private:只能被终端的浏览器缓存</p>\n<h2 id=\"expires\"><a href=\"#expires\" class=\"headerlink\" title=\"expires\"></a>expires</h2><p>他的值是一个绝对时间的GMT时间格式的字符串，如果请求时间在expires之前本地缓存始终有效</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1.如果cache-control和expires同事存在  cache-control优先级较高<br>2.Expires要求客户端和服务端的时钟严格同步</p>\n<h1 id=\"协商缓存：有服务器决定资源是否缓存。响应头Last-Modified-请求头If-Modified-Since-响应头Etag-请求头If-None-Match-成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段\"><a href=\"#协商缓存：有服务器决定资源是否缓存。响应头Last-Modified-请求头If-Modified-Since-响应头Etag-请求头If-None-Match-成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段\" class=\"headerlink\" title=\"协商缓存：有服务器决定资源是否缓存。响应头Last-Modified/请求头If-Modified-Since  响应头Etag/请求头If-None-Match 成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段\"></a>协商缓存：有服务器决定资源是否缓存。响应头Last-Modified/请求头If-Modified-Since  响应头Etag/请求头If-None-Match 成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段</h1><h2 id=\"Last-Modified-If-Modified-Since-都是GMT时间格式的字符串\"><a href=\"#Last-Modified-If-Modified-Since-都是GMT时间格式的字符串\" class=\"headerlink\" title=\"Last-Modified/If-Modified-Since 都是GMT时间格式的字符串\"></a>Last-Modified/If-Modified-Since 都是GMT时间格式的字符串</h2><p>1.浏览器第一次请求资源的时，在服务器返回资源的同时在response的header设置Last-Modified为资源在服务器上最后修改的时间</p>\n<p>2.浏览器再次请求资源时,resquest的header设置If-Modified-Since为上次response的header.Last-Modified的值</p>\n<p>3.浏览器再次请求资源时，对比If-Modified-Since和资源最后的修改时间，相同的话返回304（no Modified） 不会返回资源。也不会返回Last-Modified. 并从缓存读取资源</p>\n<p>4.如果缓存没有命中，重新请求资源，更新Last-Modified</p>\n<h2 id=\"Etag-If-None-Match\"><a href=\"#Etag-If-None-Match\" class=\"headerlink\" title=\"Etag/If-None-Match\"></a>Etag/If-None-Match</h2><p>都是由服务器生成的每个资源的唯一标识。只要资源有变化这个值就会变化。判断过程与Last-Modified/If-Modified-Since一致。不同的是返回304时 依旧会返回Etag</p>\n<h2 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h1><h2 id=\"cache-control\"><a href=\"#cache-control\" class=\"headerlink\" title=\"cache-control\"></a>cache-control</h2><p>max-age：number 相对值  第一次请求的时间和max-age设置的时间计算过期时间  再拿请求时间和过期时间对比确定是否走缓存<br>no-cache: 不适用本地缓存，需要使用协商缓存<br>no-store:禁止浏览器使用缓存，每次都会下载资源<br>public：可以被所有用户缓存，包括终端用户和CDN等代理服务器<br>private:只能被终端的浏览器缓存</p>\n<h2 id=\"expires\"><a href=\"#expires\" class=\"headerlink\" title=\"expires\"></a>expires</h2><p>他的值是一个绝对时间的GMT时间格式的字符串，如果请求时间在expires之前本地缓存始终有效</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1.如果cache-control和expires同事存在  cache-control优先级较高<br>2.Expires要求客户端和服务端的时钟严格同步</p>\n<h1 id=\"协商缓存：有服务器决定资源是否缓存。响应头Last-Modified-请求头If-Modified-Since-响应头Etag-请求头If-None-Match-成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段\"><a href=\"#协商缓存：有服务器决定资源是否缓存。响应头Last-Modified-请求头If-Modified-Since-响应头Etag-请求头If-None-Match-成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段\" class=\"headerlink\" title=\"协商缓存：有服务器决定资源是否缓存。响应头Last-Modified/请求头If-Modified-Since  响应头Etag/请求头If-None-Match 成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段\"></a>协商缓存：有服务器决定资源是否缓存。响应头Last-Modified/请求头If-Modified-Since  响应头Etag/请求头If-None-Match 成对出现，若响应头没有Etag或Last-Modified则请求头没有响应字段</h1><h2 id=\"Last-Modified-If-Modified-Since-都是GMT时间格式的字符串\"><a href=\"#Last-Modified-If-Modified-Since-都是GMT时间格式的字符串\" class=\"headerlink\" title=\"Last-Modified/If-Modified-Since 都是GMT时间格式的字符串\"></a>Last-Modified/If-Modified-Since 都是GMT时间格式的字符串</h2><p>1.浏览器第一次请求资源的时，在服务器返回资源的同时在response的header设置Last-Modified为资源在服务器上最后修改的时间</p>\n<p>2.浏览器再次请求资源时,resquest的header设置If-Modified-Since为上次response的header.Last-Modified的值</p>\n<p>3.浏览器再次请求资源时，对比If-Modified-Since和资源最后的修改时间，相同的话返回304（no Modified） 不会返回资源。也不会返回Last-Modified. 并从缓存读取资源</p>\n<p>4.如果缓存没有命中，重新请求资源，更新Last-Modified</p>\n<h2 id=\"Etag-If-None-Match\"><a href=\"#Etag-If-None-Match\" class=\"headerlink\" title=\"Etag/If-None-Match\"></a>Etag/If-None-Match</h2><p>都是由服务器生成的每个资源的唯一标识。只要资源有变化这个值就会变化。判断过程与Last-Modified/If-Modified-Since一致。不同的是返回304时 依旧会返回Etag</p>\n<h2 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p>\n"},{"title":"markdown 语法","_content":"\n### 1. 标题\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n---\n\n### 2. 引用\n\nMarkdown 标记区块引用和 email 中用 『>』的引用方式类似，只需要在整个段落的第一行最前面加上 『>』 ：\n\n```markdown\n> Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。\n```\n\n> 一级引用\n>\n> > 二级引用\n> >\n> > > 三级引用\n\n### 3. 列表\n\n- 有序列表\n\n  ```markdown\n  1. 第一项\n  2，第二项\n  ```\n\n- 无序列表\n\n  ```markdown\n  - 无序列表项\n  ```\n\n- 待办列表\n\n  ```markdown\n  - [ ] 不勾选（中括号前后有空格，内部也有空格）\n  - [x] 勾选（括号中是字母x）\n  ```\n\n- [ ] 不勾选\n\n- [x] 勾选\n\n### 4. 代码段\n\n```markdown\n​```javascript\nconsole.log('hello, javasctipt');\n​```\n```\n\n```javascript\nconsole.log('hello, javasctipt');\n```\n\n\n\n### 5. 强调\n\n- 斜体\n\n  ```markdown\n  *斜体*\n  ```\n\n  **斜体**\n\n- 加粗\n\n  ```markdown\n  **加粗**\n  ```\n\n  **加粗**\n\n  ***加粗斜体***\n\n### 6. 链接\n\n```markdown\n[百度一下](www.baidu.com)\n```\n\n[百度一下](www.baidu.com)\n\n### 7. 表格\n\n```markdown\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n```\n\n| First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |\n\n或者也可以让表格两边内容对齐，中间内容居中，例如：\n\n```markdown\nFirst Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n```\n\n| First Header | Second Header | Third Header |\n| :----------- | :-----------: | -----------: |\n| 左对齐       |   文字居中    |       右对齐 |\n| Left         |    Center     |        Right |\n\n### 8. 分割线\n\n```markdown\n---\n```\n\n---\n\n### 9.  内联图片\n\n```markdown\n![Alt text](/path/to/img.jpg)\n或\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\n![Alt text](/path/to/img.jpg)","source":"_posts/markdown语法.md","raw":"\n---\ntitle: markdown 语法\n---\n\n### 1. 标题\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n---\n\n### 2. 引用\n\nMarkdown 标记区块引用和 email 中用 『>』的引用方式类似，只需要在整个段落的第一行最前面加上 『>』 ：\n\n```markdown\n> Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。\n```\n\n> 一级引用\n>\n> > 二级引用\n> >\n> > > 三级引用\n\n### 3. 列表\n\n- 有序列表\n\n  ```markdown\n  1. 第一项\n  2，第二项\n  ```\n\n- 无序列表\n\n  ```markdown\n  - 无序列表项\n  ```\n\n- 待办列表\n\n  ```markdown\n  - [ ] 不勾选（中括号前后有空格，内部也有空格）\n  - [x] 勾选（括号中是字母x）\n  ```\n\n- [ ] 不勾选\n\n- [x] 勾选\n\n### 4. 代码段\n\n```markdown\n​```javascript\nconsole.log('hello, javasctipt');\n​```\n```\n\n```javascript\nconsole.log('hello, javasctipt');\n```\n\n\n\n### 5. 强调\n\n- 斜体\n\n  ```markdown\n  *斜体*\n  ```\n\n  **斜体**\n\n- 加粗\n\n  ```markdown\n  **加粗**\n  ```\n\n  **加粗**\n\n  ***加粗斜体***\n\n### 6. 链接\n\n```markdown\n[百度一下](www.baidu.com)\n```\n\n[百度一下](www.baidu.com)\n\n### 7. 表格\n\n```markdown\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n```\n\n| First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |\n\n或者也可以让表格两边内容对齐，中间内容居中，例如：\n\n```markdown\nFirst Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n```\n\n| First Header | Second Header | Third Header |\n| :----------- | :-----------: | -----------: |\n| 左对齐       |   文字居中    |       右对齐 |\n| Left         |    Center     |        Right |\n\n### 8. 分割线\n\n```markdown\n---\n```\n\n---\n\n### 9.  内联图片\n\n```markdown\n![Alt text](/path/to/img.jpg)\n或\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\n![Alt text](/path/to/img.jpg)","slug":"markdown语法","published":1,"date":"2021-03-15T09:18:04.298Z","updated":"2021-03-15T09:18:04.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr02g44k0001u005090j343u","content":"<h3 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a>1. 标题</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><hr>\n<h3 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2. 引用\"></a>2. 引用</h3><p>Markdown 标记区块引用和 email 中用 『&gt;』的引用方式类似，只需要在整个段落的第一行最前面加上 『&gt;』 ：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一级引用</p>\n<blockquote>\n<p>二级引用</p>\n<blockquote>\n<p>三级引用</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"3-列表\"><a href=\"#3-列表\" class=\"headerlink\" title=\"3. 列表\"></a>3. 列表</h3><ul>\n<li><p>有序列表</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\">2，第二项</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>无序列表</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 无序列表项</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>待办列表</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> [ ] 不勾选（中括号前后有空格，内部也有空格）</span><br><span class=\"line\"><span class=\"bullet\">-</span> [x] 勾选（括号中是字母x）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  不勾选</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\">  勾选</p>\n</li>\n</ul>\n<h3 id=\"4-代码段\"><a href=\"#4-代码段\" class=\"headerlink\" title=\"4. 代码段\"></a>4. 代码段</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​<span class=\"code\">```javascript</span></span><br><span class=\"line\"><span class=\"code\">console.log(&#x27;hello, javasctipt&#x27;);</span></span><br><span class=\"line\"><span class=\"code\">​```</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello, javasctipt&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-强调\"><a href=\"#5-强调\" class=\"headerlink\" title=\"5. 强调\"></a>5. 强调</h3><ul>\n<li><p>斜体</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>斜体</strong></p>\n</li>\n<li><p>加粗</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**加粗**</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>加粗</strong></p>\n<p><strong><em>加粗斜体</em></strong></p>\n</li>\n</ul>\n<h3 id=\"6-链接\"><a href=\"#6-链接\" class=\"headerlink\" title=\"6. 链接\"></a>6. 链接</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">百度一下</span>](<span class=\"link\">www.baidu.com</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"www.baidu.com\">百度一下</a></p>\n<h3 id=\"7-表格\"><a href=\"#7-表格\" class=\"headerlink\" title=\"7. 表格\"></a>7. 表格</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First Header | Second Header | Third Header</span><br><span class=\"line\">------------ | ------------- | ------------</span><br><span class=\"line\">Content Cell | Content Cell  | Content Cell</span><br><span class=\"line\">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n<th>Third Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<p>或者也可以让表格两边内容对齐，中间内容居中，例如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First Header | Second Header | Third Header</span><br><span class=\"line\">:----------- | :-----------: | -----------:</span><br><span class=\"line\">Left         | Center        | Right</span><br><span class=\"line\">Left         | Center        | Right</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">First Header</th>\n<th align=\"center\">Second Header</th>\n<th align=\"right\">Third Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">左对齐</td>\n<td align=\"center\">文字居中</td>\n<td align=\"right\">右对齐</td>\n</tr>\n<tr>\n<td align=\"left\">Left</td>\n<td align=\"center\">Center</td>\n<td align=\"right\">Right</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-分割线\"><a href=\"#8-分割线\" class=\"headerlink\" title=\"8. 分割线\"></a>8. 分割线</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"9-内联图片\"><a href=\"#9-内联图片\" class=\"headerlink\" title=\"9.  内联图片\"></a>9.  内联图片</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">Alt text</span>](<span class=\"link\">/path/to/img.jpg</span>)</span><br><span class=\"line\">或</span><br><span class=\"line\">![<span class=\"string\">Alt text</span>](<span class=\"link\">/path/to/img.jpg &quot;Optional title&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a>1. 标题</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><hr>\n<h3 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2. 引用\"></a>2. 引用</h3><p>Markdown 标记区块引用和 email 中用 『&gt;』的引用方式类似，只需要在整个段落的第一行最前面加上 『&gt;』 ：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一级引用</p>\n<blockquote>\n<p>二级引用</p>\n<blockquote>\n<p>三级引用</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"3-列表\"><a href=\"#3-列表\" class=\"headerlink\" title=\"3. 列表\"></a>3. 列表</h3><ul>\n<li><p>有序列表</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\">2，第二项</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>无序列表</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 无序列表项</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>待办列表</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> [ ] 不勾选（中括号前后有空格，内部也有空格）</span><br><span class=\"line\"><span class=\"bullet\">-</span> [x] 勾选（括号中是字母x）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  不勾选</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\">  勾选</p>\n</li>\n</ul>\n<h3 id=\"4-代码段\"><a href=\"#4-代码段\" class=\"headerlink\" title=\"4. 代码段\"></a>4. 代码段</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​<span class=\"code\">```javascript</span></span><br><span class=\"line\"><span class=\"code\">console.log(&#x27;hello, javasctipt&#x27;);</span></span><br><span class=\"line\"><span class=\"code\">​```</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello, javasctipt&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-强调\"><a href=\"#5-强调\" class=\"headerlink\" title=\"5. 强调\"></a>5. 强调</h3><ul>\n<li><p>斜体</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>斜体</strong></p>\n</li>\n<li><p>加粗</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**加粗**</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>加粗</strong></p>\n<p><strong><em>加粗斜体</em></strong></p>\n</li>\n</ul>\n<h3 id=\"6-链接\"><a href=\"#6-链接\" class=\"headerlink\" title=\"6. 链接\"></a>6. 链接</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">百度一下</span>](<span class=\"link\">www.baidu.com</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"www.baidu.com\">百度一下</a></p>\n<h3 id=\"7-表格\"><a href=\"#7-表格\" class=\"headerlink\" title=\"7. 表格\"></a>7. 表格</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First Header | Second Header | Third Header</span><br><span class=\"line\">------------ | ------------- | ------------</span><br><span class=\"line\">Content Cell | Content Cell  | Content Cell</span><br><span class=\"line\">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n<th>Third Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<p>或者也可以让表格两边内容对齐，中间内容居中，例如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First Header | Second Header | Third Header</span><br><span class=\"line\">:----------- | :-----------: | -----------:</span><br><span class=\"line\">Left         | Center        | Right</span><br><span class=\"line\">Left         | Center        | Right</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">First Header</th>\n<th align=\"center\">Second Header</th>\n<th align=\"right\">Third Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">左对齐</td>\n<td align=\"center\">文字居中</td>\n<td align=\"right\">右对齐</td>\n</tr>\n<tr>\n<td align=\"left\">Left</td>\n<td align=\"center\">Center</td>\n<td align=\"right\">Right</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-分割线\"><a href=\"#8-分割线\" class=\"headerlink\" title=\"8. 分割线\"></a>8. 分割线</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"9-内联图片\"><a href=\"#9-内联图片\" class=\"headerlink\" title=\"9.  内联图片\"></a>9.  内联图片</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">Alt text</span>](<span class=\"link\">/path/to/img.jpg</span>)</span><br><span class=\"line\">或</span><br><span class=\"line\">![<span class=\"string\">Alt text</span>](<span class=\"link\">/path/to/img.jpg &quot;Optional title&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\"></p>\n"},{"title":"node child_process","_content":"# 很重要的两个api\n\n区别 | child_process.exec() | child_process.exexFile()\n---|---|---\n 适用平台 |Windows | 在 Unix 类型的操作系统（Unix、Linux、macOS）上，child_process.execFile() 可以更高效\n 参数 | child_process.exec(command[, options][, callback]) | child_process.execFile(file[, args][, options][, callback])\n \n\n## child_process.exec(command[, options][, callback])\n\n\n```javascript\nconst { exec } = require('child_process')\nconst cp = exec('node --version', {}, (err, stdout, stderr) => {\n  console.log(err, stdout, stderr);\n})\n\ncp.stdout.on('data', (data) => {\n  console.log(data);\n})\n\ncp.stdout.on('data', (data) => {\n  console.log(data);\n})\n\ncp.on('exit', () => {\n  console.log('退出');\n})\n```\n\n++**exec的回调在exit之后**++","source":"_posts/node_child_process.md","raw":"---\ntitle: node child_process\n---\n# 很重要的两个api\n\n区别 | child_process.exec() | child_process.exexFile()\n---|---|---\n 适用平台 |Windows | 在 Unix 类型的操作系统（Unix、Linux、macOS）上，child_process.execFile() 可以更高效\n 参数 | child_process.exec(command[, options][, callback]) | child_process.execFile(file[, args][, options][, callback])\n \n\n## child_process.exec(command[, options][, callback])\n\n\n```javascript\nconst { exec } = require('child_process')\nconst cp = exec('node --version', {}, (err, stdout, stderr) => {\n  console.log(err, stdout, stderr);\n})\n\ncp.stdout.on('data', (data) => {\n  console.log(data);\n})\n\ncp.stdout.on('data', (data) => {\n  console.log(data);\n})\n\ncp.on('exit', () => {\n  console.log('退出');\n})\n```\n\n++**exec的回调在exit之后**++","slug":"node_child_process","published":1,"date":"2021-03-15T09:07:56.347Z","updated":"2021-03-15T09:07:56.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr02g44l0002u0056vwnao3q","content":"<h1 id=\"很重要的两个api\"><a href=\"#很重要的两个api\" class=\"headerlink\" title=\"很重要的两个api\"></a>很重要的两个api</h1><table>\n<thead>\n<tr>\n<th>区别</th>\n<th>child_process.exec()</th>\n<th>child_process.exexFile()</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>适用平台</td>\n<td>Windows</td>\n<td>在 Unix 类型的操作系统（Unix、Linux、macOS）上，child_process.execFile() 可以更高效</td>\n</tr>\n<tr>\n<td>参数</td>\n<td>child_process.exec(command[, options][, callback])</td>\n<td>child_process.execFile(file[, args][, options][, callback])</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"child-process-exec-command-options-callback\"><a href=\"#child-process-exec-command-options-callback\" class=\"headerlink\" title=\"child_process.exec(command[, options][, callback])\"></a>child_process.exec(command[, options][, callback])</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; exec &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cp = exec(<span class=\"string\">&#x27;node --version&#x27;</span>, &#123;&#125;, <span class=\"function\">(<span class=\"params\">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err, stdout, stderr);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">cp.stdout.on(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">cp.stdout.on(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">cp.on(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;退出&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>++<strong>exec的回调在exit之后</strong>++</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"很重要的两个api\"><a href=\"#很重要的两个api\" class=\"headerlink\" title=\"很重要的两个api\"></a>很重要的两个api</h1><table>\n<thead>\n<tr>\n<th>区别</th>\n<th>child_process.exec()</th>\n<th>child_process.exexFile()</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>适用平台</td>\n<td>Windows</td>\n<td>在 Unix 类型的操作系统（Unix、Linux、macOS）上，child_process.execFile() 可以更高效</td>\n</tr>\n<tr>\n<td>参数</td>\n<td>child_process.exec(command[, options][, callback])</td>\n<td>child_process.execFile(file[, args][, options][, callback])</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"child-process-exec-command-options-callback\"><a href=\"#child-process-exec-command-options-callback\" class=\"headerlink\" title=\"child_process.exec(command[, options][, callback])\"></a>child_process.exec(command[, options][, callback])</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; exec &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cp = exec(<span class=\"string\">&#x27;node --version&#x27;</span>, &#123;&#125;, <span class=\"function\">(<span class=\"params\">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err, stdout, stderr);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">cp.stdout.on(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">cp.stdout.on(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">cp.on(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;退出&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>++<strong>exec的回调在exit之后</strong>++</p>\n"},{"title":"webpack loader plugin","_content":"\n### webpack loader\n*定义*：loader是一个导出为function的node模块。可以将匹配到的文件进行一次转换，同时loader可以链式传递。\n#### loader的特点\n- loader 的执行顺序和代码书写的顺序是相反的，即：从下至上，从右至左。\n- 第一个执行的 loader 会接收源文件做为参数，下一次执行的 loader 会接收前一个 loader 执行的返回值做为参数\n- 需要严格遵循“单一职责”原则，即每个 loader 只负责自己需要负责的事情\n- 顺序最后的 loader 第一个被调用，它拿到的参数是 source 的内容\n- 顺序第一的 loader 最后被调用， webpack 期望它返回 JS 代码，source map 如前面所说是可选的返回值。\n- 夹在中间的 loader 被链式调用，他们拿到上个 loader 的返回值，为下一个 loader 提供输入。\n\n#### loader的使用方式\n##### 1：在配置文件webpack.config.js中配置\n```\n  module: {\n    rules: [{\n      test: /\\.js$/,\n      use: [{\n        loader: path.resolve(__dirname, 'var_to_const')\n      }]\n    }]\n  },\n  resolveLoader: {\n    // 告诉 webpack 该去那个目录下找 loader 模块\n    modules: ['node_modules', path.resolve(__dirname, 'loaders')]\n  }\n```\n##### 2：通过命令行参数方式\n```\n  webpack --module-bind 'txt=var_to_const'\n```\n\n##### 3：通过内联使用（相当于使用 var_to_const来导入 file.txt 文件）\n```\nimport txt from 'var_to_const!./file.txt';\n```\n\n\n#### loader的自定义\n```\nmodule.exports = function(source){\n  var content=\"\";\n  content = source.replace(/var/g, \"const\");\n  return content; \n}\n```\nsource为匹配文件的文件内容，在这里你可以为所欲为，用正则或者AST处理内容并返回。\n\n#### loader的API\nmethods|含义\n--|:--:|\nthis.request | 被解析出来的 request 字符串。例子：\"/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr\"\nthis.loaders | 所有 loader 组成的数组。它在 pitch 阶段的时候是可以写入的。\nthis.async | 告诉 loader-runner 这个 loader 将会异步地回调\nthis.callback | 一个可以同步或者异步调用的可以返回多个结果的函数\nthis.resourcePath | 资源文件的路径。\n[loader API](https://www.webpackjs.com/api/loaders/)\n\n\n### webpack plugin\n#### 写一个plugin\n主要的步骤如下:\n1. 编写一个JavaScript命名函数。\n2. 在它的原型上定义一个apply方法。\n3. 指定挂载的webpack事件钩子。\n4. 处理webpack内部实例的特定数据。\n5. 功能完成后调用webpack提供的回调。\n\n\n编写插件之前要理解compiler和compilation两个对象，以及webpack生命周期的各个阶段和钩子，plugin比loader强大，通过plugin你可以访问compliler和compilation过程，通过钩子拦截webpack的执行。\n\n比如我们可以在构建生成文件时，将所有生成的文件名生成到filelist.md的文件中\n\n```\nclass FileListPlugin {\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync('FileListPlugin', (compliation, cb) => {\n      let assets = compliation.assets;\n      let content = `##  文件名   文件大小\\r\\n`;\n      Object.entries(assets).forEach(([filename, stateObj]) => {\n          content += `- ${filename}    ${stateObj.size()}\\r\\n`\n      });\n      assets[this.filename] = {\n          source() {\n              return content;\n          },\n          size() {\n              return content.length;\n          }\n      };\n      cb();\n    })\n  }\n}\n\nmodule.exports = FileListPlugin;\n```\n\n> webpack会将compilation.assets的内容生成文件，所以可以在构建中利用它生成我们想要的文件。\n\n\n#### webpack 插件分析\n##### 1. 首先介绍webpack源码分析方法\n- node --inspect-brk ./node_modules/webpack/bin/webpack.js --config ./webpack.config.js\n- chrome输入 chrome://inspect/\n##### 2. 主要的流程是：\n![blockchain](https://pic2.zhimg.com/80/v2-e2a3d16099153701cab0cb8cebc78e01_720w.png \"流程\")\n\n\n","source":"_posts/webpack_loader_plugin.md","raw":"\n---\ntitle: webpack loader plugin\n---\n\n### webpack loader\n*定义*：loader是一个导出为function的node模块。可以将匹配到的文件进行一次转换，同时loader可以链式传递。\n#### loader的特点\n- loader 的执行顺序和代码书写的顺序是相反的，即：从下至上，从右至左。\n- 第一个执行的 loader 会接收源文件做为参数，下一次执行的 loader 会接收前一个 loader 执行的返回值做为参数\n- 需要严格遵循“单一职责”原则，即每个 loader 只负责自己需要负责的事情\n- 顺序最后的 loader 第一个被调用，它拿到的参数是 source 的内容\n- 顺序第一的 loader 最后被调用， webpack 期望它返回 JS 代码，source map 如前面所说是可选的返回值。\n- 夹在中间的 loader 被链式调用，他们拿到上个 loader 的返回值，为下一个 loader 提供输入。\n\n#### loader的使用方式\n##### 1：在配置文件webpack.config.js中配置\n```\n  module: {\n    rules: [{\n      test: /\\.js$/,\n      use: [{\n        loader: path.resolve(__dirname, 'var_to_const')\n      }]\n    }]\n  },\n  resolveLoader: {\n    // 告诉 webpack 该去那个目录下找 loader 模块\n    modules: ['node_modules', path.resolve(__dirname, 'loaders')]\n  }\n```\n##### 2：通过命令行参数方式\n```\n  webpack --module-bind 'txt=var_to_const'\n```\n\n##### 3：通过内联使用（相当于使用 var_to_const来导入 file.txt 文件）\n```\nimport txt from 'var_to_const!./file.txt';\n```\n\n\n#### loader的自定义\n```\nmodule.exports = function(source){\n  var content=\"\";\n  content = source.replace(/var/g, \"const\");\n  return content; \n}\n```\nsource为匹配文件的文件内容，在这里你可以为所欲为，用正则或者AST处理内容并返回。\n\n#### loader的API\nmethods|含义\n--|:--:|\nthis.request | 被解析出来的 request 字符串。例子：\"/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr\"\nthis.loaders | 所有 loader 组成的数组。它在 pitch 阶段的时候是可以写入的。\nthis.async | 告诉 loader-runner 这个 loader 将会异步地回调\nthis.callback | 一个可以同步或者异步调用的可以返回多个结果的函数\nthis.resourcePath | 资源文件的路径。\n[loader API](https://www.webpackjs.com/api/loaders/)\n\n\n### webpack plugin\n#### 写一个plugin\n主要的步骤如下:\n1. 编写一个JavaScript命名函数。\n2. 在它的原型上定义一个apply方法。\n3. 指定挂载的webpack事件钩子。\n4. 处理webpack内部实例的特定数据。\n5. 功能完成后调用webpack提供的回调。\n\n\n编写插件之前要理解compiler和compilation两个对象，以及webpack生命周期的各个阶段和钩子，plugin比loader强大，通过plugin你可以访问compliler和compilation过程，通过钩子拦截webpack的执行。\n\n比如我们可以在构建生成文件时，将所有生成的文件名生成到filelist.md的文件中\n\n```\nclass FileListPlugin {\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync('FileListPlugin', (compliation, cb) => {\n      let assets = compliation.assets;\n      let content = `##  文件名   文件大小\\r\\n`;\n      Object.entries(assets).forEach(([filename, stateObj]) => {\n          content += `- ${filename}    ${stateObj.size()}\\r\\n`\n      });\n      assets[this.filename] = {\n          source() {\n              return content;\n          },\n          size() {\n              return content.length;\n          }\n      };\n      cb();\n    })\n  }\n}\n\nmodule.exports = FileListPlugin;\n```\n\n> webpack会将compilation.assets的内容生成文件，所以可以在构建中利用它生成我们想要的文件。\n\n\n#### webpack 插件分析\n##### 1. 首先介绍webpack源码分析方法\n- node --inspect-brk ./node_modules/webpack/bin/webpack.js --config ./webpack.config.js\n- chrome输入 chrome://inspect/\n##### 2. 主要的流程是：\n![blockchain](https://pic2.zhimg.com/80/v2-e2a3d16099153701cab0cb8cebc78e01_720w.png \"流程\")\n\n\n","slug":"webpack_loader_plugin","published":1,"date":"2021-04-15T08:53:06.256Z","updated":"2021-04-15T08:53:06.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckr02g44n0004u0051nw4110u","content":"<h3 id=\"webpack-loader\"><a href=\"#webpack-loader\" class=\"headerlink\" title=\"webpack loader\"></a>webpack loader</h3><p><em>定义</em>：loader是一个导出为function的node模块。可以将匹配到的文件进行一次转换，同时loader可以链式传递。</p>\n<h4 id=\"loader的特点\"><a href=\"#loader的特点\" class=\"headerlink\" title=\"loader的特点\"></a>loader的特点</h4><ul>\n<li>loader 的执行顺序和代码书写的顺序是相反的，即：从下至上，从右至左。</li>\n<li>第一个执行的 loader 会接收源文件做为参数，下一次执行的 loader 会接收前一个 loader 执行的返回值做为参数</li>\n<li>需要严格遵循“单一职责”原则，即每个 loader 只负责自己需要负责的事情</li>\n<li>顺序最后的 loader 第一个被调用，它拿到的参数是 source 的内容</li>\n<li>顺序第一的 loader 最后被调用， webpack 期望它返回 JS 代码，source map 如前面所说是可选的返回值。</li>\n<li>夹在中间的 loader 被链式调用，他们拿到上个 loader 的返回值，为下一个 loader 提供输入。</li>\n</ul>\n<h4 id=\"loader的使用方式\"><a href=\"#loader的使用方式\" class=\"headerlink\" title=\"loader的使用方式\"></a>loader的使用方式</h4><h5 id=\"1：在配置文件webpack-config-js中配置\"><a href=\"#1：在配置文件webpack-config-js中配置\" class=\"headerlink\" title=\"1：在配置文件webpack.config.js中配置\"></a>1：在配置文件webpack.config.js中配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">  rules: [&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">      loader: path.resolve(__dirname, &#39;var_to_const&#39;)</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">resolveLoader: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 告诉 webpack 该去那个目录下找 loader 模块</span><br><span class=\"line\">  modules: [&#39;node_modules&#39;, path.resolve(__dirname, &#39;loaders&#39;)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2：通过命令行参数方式\"><a href=\"#2：通过命令行参数方式\" class=\"headerlink\" title=\"2：通过命令行参数方式\"></a>2：通过命令行参数方式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --module-bind &#39;txt&#x3D;var_to_const&#39;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3：通过内联使用（相当于使用-var-to-const来导入-file-txt-文件）\"><a href=\"#3：通过内联使用（相当于使用-var-to-const来导入-file-txt-文件）\" class=\"headerlink\" title=\"3：通过内联使用（相当于使用 var_to_const来导入 file.txt 文件）\"></a>3：通过内联使用（相当于使用 var_to_const来导入 file.txt 文件）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import txt from &#39;var_to_const!.&#x2F;file.txt&#39;;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"loader的自定义\"><a href=\"#loader的自定义\" class=\"headerlink\" title=\"loader的自定义\"></a>loader的自定义</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; function(source)&#123;</span><br><span class=\"line\">  var content&#x3D;&quot;&quot;;</span><br><span class=\"line\">  content &#x3D; source.replace(&#x2F;var&#x2F;g, &quot;const&quot;);</span><br><span class=\"line\">  return content; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>source为匹配文件的文件内容，在这里你可以为所欲为，用正则或者AST处理内容并返回。</p>\n<h4 id=\"loader的API\"><a href=\"#loader的API\" class=\"headerlink\" title=\"loader的API\"></a>loader的API</h4><table>\n<thead>\n<tr>\n<th>methods</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>this.request</td>\n<td align=\"center\">被解析出来的 request 字符串。例子：”/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr”</td>\n</tr>\n<tr>\n<td>this.loaders</td>\n<td align=\"center\">所有 loader 组成的数组。它在 pitch 阶段的时候是可以写入的。</td>\n</tr>\n<tr>\n<td>this.async</td>\n<td align=\"center\">告诉 loader-runner 这个 loader 将会异步地回调</td>\n</tr>\n<tr>\n<td>this.callback</td>\n<td align=\"center\">一个可以同步或者异步调用的可以返回多个结果的函数</td>\n</tr>\n<tr>\n<td>this.resourcePath</td>\n<td align=\"center\">资源文件的路径。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.webpackjs.com/api/loaders/\">loader API</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"webpack-plugin\"><a href=\"#webpack-plugin\" class=\"headerlink\" title=\"webpack plugin\"></a>webpack plugin</h3><h4 id=\"写一个plugin\"><a href=\"#写一个plugin\" class=\"headerlink\" title=\"写一个plugin\"></a>写一个plugin</h4><p>主要的步骤如下:</p>\n<ol>\n<li>编写一个JavaScript命名函数。</li>\n<li>在它的原型上定义一个apply方法。</li>\n<li>指定挂载的webpack事件钩子。</li>\n<li>处理webpack内部实例的特定数据。</li>\n<li>功能完成后调用webpack提供的回调。</li>\n</ol>\n<p>编写插件之前要理解compiler和compilation两个对象，以及webpack生命周期的各个阶段和钩子，plugin比loader强大，通过plugin你可以访问compliler和compilation过程，通过钩子拦截webpack的执行。</p>\n<p>比如我们可以在构建生成文件时，将所有生成的文件名生成到filelist.md的文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FileListPlugin &#123;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    compiler.hooks.emit.tapAsync(&#39;FileListPlugin&#39;, (compliation, cb) &#x3D;&gt; &#123;</span><br><span class=\"line\">      let assets &#x3D; compliation.assets;</span><br><span class=\"line\">      let content &#x3D; &#96;##  文件名   文件大小\\r\\n&#96;;</span><br><span class=\"line\">      Object.entries(assets).forEach(([filename, stateObj]) &#x3D;&gt; &#123;</span><br><span class=\"line\">          content +&#x3D; &#96;- $&#123;filename&#125;    $&#123;stateObj.size()&#125;\\r\\n&#96;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      assets[this.filename] &#x3D; &#123;</span><br><span class=\"line\">          source() &#123;</span><br><span class=\"line\">              return content;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          size() &#123;</span><br><span class=\"line\">              return content.length;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; FileListPlugin;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>webpack会将compilation.assets的内容生成文件，所以可以在构建中利用它生成我们想要的文件。</p>\n</blockquote>\n<h4 id=\"webpack-插件分析\"><a href=\"#webpack-插件分析\" class=\"headerlink\" title=\"webpack 插件分析\"></a>webpack 插件分析</h4><h5 id=\"1-首先介绍webpack源码分析方法\"><a href=\"#1-首先介绍webpack源码分析方法\" class=\"headerlink\" title=\"1. 首先介绍webpack源码分析方法\"></a>1. 首先介绍webpack源码分析方法</h5><ul>\n<li>node –inspect-brk ./node_modules/webpack/bin/webpack.js –config ./webpack.config.js</li>\n<li>chrome输入 chrome://inspect/<h5 id=\"2-主要的流程是：\"><a href=\"#2-主要的流程是：\" class=\"headerlink\" title=\"2. 主要的流程是：\"></a>2. 主要的流程是：</h5><img src=\"https://pic2.zhimg.com/80/v2-e2a3d16099153701cab0cb8cebc78e01_720w.png\" alt=\"blockchain\" title=\"流程\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"webpack-loader\"><a href=\"#webpack-loader\" class=\"headerlink\" title=\"webpack loader\"></a>webpack loader</h3><p><em>定义</em>：loader是一个导出为function的node模块。可以将匹配到的文件进行一次转换，同时loader可以链式传递。</p>\n<h4 id=\"loader的特点\"><a href=\"#loader的特点\" class=\"headerlink\" title=\"loader的特点\"></a>loader的特点</h4><ul>\n<li>loader 的执行顺序和代码书写的顺序是相反的，即：从下至上，从右至左。</li>\n<li>第一个执行的 loader 会接收源文件做为参数，下一次执行的 loader 会接收前一个 loader 执行的返回值做为参数</li>\n<li>需要严格遵循“单一职责”原则，即每个 loader 只负责自己需要负责的事情</li>\n<li>顺序最后的 loader 第一个被调用，它拿到的参数是 source 的内容</li>\n<li>顺序第一的 loader 最后被调用， webpack 期望它返回 JS 代码，source map 如前面所说是可选的返回值。</li>\n<li>夹在中间的 loader 被链式调用，他们拿到上个 loader 的返回值，为下一个 loader 提供输入。</li>\n</ul>\n<h4 id=\"loader的使用方式\"><a href=\"#loader的使用方式\" class=\"headerlink\" title=\"loader的使用方式\"></a>loader的使用方式</h4><h5 id=\"1：在配置文件webpack-config-js中配置\"><a href=\"#1：在配置文件webpack-config-js中配置\" class=\"headerlink\" title=\"1：在配置文件webpack.config.js中配置\"></a>1：在配置文件webpack.config.js中配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">  rules: [&#123;</span><br><span class=\"line\">    test: &#x2F;\\.js$&#x2F;,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">      loader: path.resolve(__dirname, &#39;var_to_const&#39;)</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">resolveLoader: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 告诉 webpack 该去那个目录下找 loader 模块</span><br><span class=\"line\">  modules: [&#39;node_modules&#39;, path.resolve(__dirname, &#39;loaders&#39;)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2：通过命令行参数方式\"><a href=\"#2：通过命令行参数方式\" class=\"headerlink\" title=\"2：通过命令行参数方式\"></a>2：通过命令行参数方式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --module-bind &#39;txt&#x3D;var_to_const&#39;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3：通过内联使用（相当于使用-var-to-const来导入-file-txt-文件）\"><a href=\"#3：通过内联使用（相当于使用-var-to-const来导入-file-txt-文件）\" class=\"headerlink\" title=\"3：通过内联使用（相当于使用 var_to_const来导入 file.txt 文件）\"></a>3：通过内联使用（相当于使用 var_to_const来导入 file.txt 文件）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import txt from &#39;var_to_const!.&#x2F;file.txt&#39;;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"loader的自定义\"><a href=\"#loader的自定义\" class=\"headerlink\" title=\"loader的自定义\"></a>loader的自定义</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; function(source)&#123;</span><br><span class=\"line\">  var content&#x3D;&quot;&quot;;</span><br><span class=\"line\">  content &#x3D; source.replace(&#x2F;var&#x2F;g, &quot;const&quot;);</span><br><span class=\"line\">  return content; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>source为匹配文件的文件内容，在这里你可以为所欲为，用正则或者AST处理内容并返回。</p>\n<h4 id=\"loader的API\"><a href=\"#loader的API\" class=\"headerlink\" title=\"loader的API\"></a>loader的API</h4><table>\n<thead>\n<tr>\n<th>methods</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>this.request</td>\n<td align=\"center\">被解析出来的 request 字符串。例子：”/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr”</td>\n</tr>\n<tr>\n<td>this.loaders</td>\n<td align=\"center\">所有 loader 组成的数组。它在 pitch 阶段的时候是可以写入的。</td>\n</tr>\n<tr>\n<td>this.async</td>\n<td align=\"center\">告诉 loader-runner 这个 loader 将会异步地回调</td>\n</tr>\n<tr>\n<td>this.callback</td>\n<td align=\"center\">一个可以同步或者异步调用的可以返回多个结果的函数</td>\n</tr>\n<tr>\n<td>this.resourcePath</td>\n<td align=\"center\">资源文件的路径。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.webpackjs.com/api/loaders/\">loader API</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"webpack-plugin\"><a href=\"#webpack-plugin\" class=\"headerlink\" title=\"webpack plugin\"></a>webpack plugin</h3><h4 id=\"写一个plugin\"><a href=\"#写一个plugin\" class=\"headerlink\" title=\"写一个plugin\"></a>写一个plugin</h4><p>主要的步骤如下:</p>\n<ol>\n<li>编写一个JavaScript命名函数。</li>\n<li>在它的原型上定义一个apply方法。</li>\n<li>指定挂载的webpack事件钩子。</li>\n<li>处理webpack内部实例的特定数据。</li>\n<li>功能完成后调用webpack提供的回调。</li>\n</ol>\n<p>编写插件之前要理解compiler和compilation两个对象，以及webpack生命周期的各个阶段和钩子，plugin比loader强大，通过plugin你可以访问compliler和compilation过程，通过钩子拦截webpack的执行。</p>\n<p>比如我们可以在构建生成文件时，将所有生成的文件名生成到filelist.md的文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FileListPlugin &#123;</span><br><span class=\"line\">  apply(compiler) &#123;</span><br><span class=\"line\">    compiler.hooks.emit.tapAsync(&#39;FileListPlugin&#39;, (compliation, cb) &#x3D;&gt; &#123;</span><br><span class=\"line\">      let assets &#x3D; compliation.assets;</span><br><span class=\"line\">      let content &#x3D; &#96;##  文件名   文件大小\\r\\n&#96;;</span><br><span class=\"line\">      Object.entries(assets).forEach(([filename, stateObj]) &#x3D;&gt; &#123;</span><br><span class=\"line\">          content +&#x3D; &#96;- $&#123;filename&#125;    $&#123;stateObj.size()&#125;\\r\\n&#96;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      assets[this.filename] &#x3D; &#123;</span><br><span class=\"line\">          source() &#123;</span><br><span class=\"line\">              return content;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          size() &#123;</span><br><span class=\"line\">              return content.length;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; FileListPlugin;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>webpack会将compilation.assets的内容生成文件，所以可以在构建中利用它生成我们想要的文件。</p>\n</blockquote>\n<h4 id=\"webpack-插件分析\"><a href=\"#webpack-插件分析\" class=\"headerlink\" title=\"webpack 插件分析\"></a>webpack 插件分析</h4><h5 id=\"1-首先介绍webpack源码分析方法\"><a href=\"#1-首先介绍webpack源码分析方法\" class=\"headerlink\" title=\"1. 首先介绍webpack源码分析方法\"></a>1. 首先介绍webpack源码分析方法</h5><ul>\n<li>node –inspect-brk ./node_modules/webpack/bin/webpack.js –config ./webpack.config.js</li>\n<li>chrome输入 chrome://inspect/<h5 id=\"2-主要的流程是：\"><a href=\"#2-主要的流程是：\" class=\"headerlink\" title=\"2. 主要的流程是：\"></a>2. 主要的流程是：</h5><img src=\"https://pic2.zhimg.com/80/v2-e2a3d16099153701cab0cb8cebc78e01_720w.png\" alt=\"blockchain\" title=\"流程\"></li>\n</ul>\n"},{"title":"WEBPACK HMR 原理","type":"webpack","_content":"## 为什么要开启hmr\n方便开发，代码更新后不需要手动刷新前端页面\n## 如何开启hmr\n1. webpack 配置\n```javascript\nmodule.exports = {\n    devServer: {\n        contentBase: path.resolve(__dirname, './dist'), // 设置静态资源目录\n        hot: true, // 是否开启hmr\n        port: 7000,\n        host: '127.0.0.1'\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ]\n}\n```\n除此之外还需要在代码中\n```javascript\nif (module.hot) {\n    module.hot.accept('./a.js', () => {\n        ...\n    })\n}\n```\n以上代码告诉webpack对./a.js进行监听 修改./a.js 会触发hmr\n当然实际开发过程中不会这样处理都是借助第三方的插件\n以react为例 需要react-hot-loader 插件\nbabel的配置文件在.babelrc\n```javascript\n\"plugins\": [\n    \"react-hot-loader/babel\"\n]\n```\n\n## hmr 原理\n```seq\nCompiler -> Server: 不同的编译阶段通知Server\nServer -> client: 把编译进度告诉client\nclient -> devServer: 通过emitter 推送webpackHotUpdate\ndevServer -> bundle: 调用bundle 的hotCheck方法\nbundle -> bundle: 请求新模块的内容 通过script引入\n\n```\nnode_modules/webpack-dev-server/lib/Server.js\n```javascript\n    const { compile, invalid, done } = compiler.hooks;\n    ...\n    done.tap('webpack-dev-server', (stats) => {\n        this._sendStats(this.sockets, this.getStats(stats)); // \n        this._stats = stats;\n    });\n```\n基于webpack compiler 生命周期通过this.sockWrite发送消息到client端\n```javascript\n    this.sockWrite(sockets, 'hash', stats.hash);\n\n    if (stats.errors.length > 0) {\n      this.sockWrite(sockets, 'errors', stats.errors);\n    } else if (stats.warnings.length > 0) {\n      this.sockWrite(sockets, 'warnings', stats.warnings);\n    } else {\n      this.sockWrite(sockets, 'ok');\n    }\n```\n\nnode_modules/webpack-dev-server/client/index.js\n接受来自Server.js \b的sock的信息 在ok 和 warnings 调用reloadApp方法\n\n```javascript\n    var hotEmitter = require('webpack/hot/emitter');\n\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n\n```\n主要通过hotEmitter 和 node_modules/webpack/hot/dev-server.js 交互\n```javascript\n    var hotEmitter = require(\"./emitter\");\n\thotEmitter.on(\"webpackHotUpdate\", function (currentHash) {\n\t\tlastHash = currentHash;\n\t\tif (!upToDate() && module.hot.status() === \"idle\") {\n\t\t\tlog(\"info\", \"[HMR] Checking for updates on the server...\");\n\t\t\tcheck();\n\t\t}\n\t});\n```\n\n```javascript\n    module.hot\n\t\t\t.check(true)\n```\n这里的module.hot 由bundle.js createModuleHotObject创建 module.hot.check(true) 调用\n\n```javascript\n    function hotCheck(applyOnUpdate) {\n        ...\n        return __webpack_require__.hmrM().then(function (update) {\n            ...\n        });\n    }\n```\n__webpack_require__.hmrM()主要通过fetch请求服务端数据\n```javascript\n    fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {\n        ...\n    // http://127.0.0.1:7000/main.a9229e35e308de66caf4.hot-update.json\n    // chunk id 加 hash 请求后端\n```\n```javascript\n{\n    c:['main'], // 当前需要更新的chunk\n    r:[],\n    m:[]\n}\n```\n\n返回结果调用\n```javascript\nObject.keys(__webpack_require__.hmrC).reduce(function (\n    promises,\n    key // 值为jsonp\n) {\n    // 所以调用的是\n    __webpack_require__.hmrC[key](\n        update.c,\n        update.r,\n        update.m,\n    );\n    return promises;\n}\n[])\n// update 就是返回结果\n```\n\n遍历chunkIds 当installedChunks 中包含chunkId 时调用loadUpdateChunk\n```javascript\n__webpack_require__.hmrC.jsonp = function (\n    chunkIds,\n    ...\n) {\n    ...\n    chunkIds.forEach(function (chunkId) {\n        if (\n            __webpack_require__.o(installedChunks, chunkId) &&\n            installedChunks[chunkId] !== undefined\n        ) {\n            promises.push(loadUpdateChunk(chunkId, updatedModulesList));\n            currentUpdateChunks[chunkId] = true;\n        }\n    });\n};\n```\n\nloadUpdateChunk 通过__webpack_require__.l 创建script标签引入更新的模块\n```javascript\n...\nreturn new Promise((resolve, reject) => {\n    \n    waitingUpdateResolves[chunkId] = resolve;\n    ...\n\n```\n每次调用loadUpdateChunk返回一个Promise 以waitingUpdateResolves 收集resolve 当本次更新完成执行resolve\n```javascript\nself[\"webpackHotUpdatehmr\"] = (chunkId, moreModules, runtime) => {\n    ...\n    if (runtime) currentUpdateRuntime.push(runtime);\n    /******/\n    if (waitingUpdateResolves[chunkId]) {\n        /******/\n        waitingUpdateResolves[chunkId]();\n        /******/\n        waitingUpdateResolves[chunkId] = undefined;\n        /******/\n    }\n    /******/\n};\n```\nbundle.js 声明webpackHotUpdatehmr 方法 当__webpack_require__.l 引入新内容并成功加载时触发\n```javascript\nself[\"webpackHotUpdatehmr\"](\"main\",{\n      \"./src/a.js\":\n      ((module, __unused_webpack_exports, __webpack_require__) => {\n        eval(\"const b = __webpack_require__(/*! ./b */ \\\"./src/b.js\\\")\\nmodule.exports = {\\n    a: 'abcdedfd',\\n    b: b\\n}\\n\\n//# sourceURL=webpack://hmr/./src/a.js?\");\n     })\n\n},\n...\n);\n```\n当所有的更新资源加载完成时调用hotCheck 中的如下代码\n```javascript\nreturn Promise.all(\n    Object.keys(__webpack_require__.hmrC).reduce(function (\n            promises,\n            key\n        ) {\n            // 这里执行的是__webpack_require__.hmrC.jsonp\n            __webpack_require__.hmrC[key](\n                update.c,\n                update.r,\n                update.m,\n                promises, // promises.push(loadUpdateChunk(chunkId, updatedModulesList));\n                ...\n            );\n            return promises;\n        },\n        [])\n).then(function () {\n    return waitForBlockingPromises(function () {\n        if (applyOnUpdate) {\n            return internalApply(applyOnUpdate);\n        } else {\n            setStatus(\"ready\");\n            return updatedModules;\n        }\n    });\n});\n```\n\n```javascript\nfunction internalApply(options) {\n    results.forEach(function (result) {\n        if (result.apply) {\n            var modules = result.apply(reportError); \n            ...\n        }\n    });\n}\n```\n\ninternalApply 调用result.apply 方法执行在代码中添加的回调 module.hot.accept('./a.js', () => {}) 做到更新页面的效果\nresult.apply 调用 applyHandler\n```javascript\nfunction applyHandler(options) {\n    return {\n        dispose:() => {},\n        apply: () => {\n            ...\n            var acceptCallback = module.hot._acceptedDependencies[dependency];\n            if (acceptCallback) {\n                callbacks.push(acceptCallback);\n            }\n            for (var k = 0; k < callbacks.length; k++) {\n                callbacks[k].call(); // 执行回调里面的逻辑\n            }\n            ...\n        }\n    }\n}\n```\n\n\n\n## 关于react状态保存\n单纯的hmr就是更新通知，请求新模块代码 通过script动态引入。无法做到react开发过程中对状态保存。\n[react 状态保存原理](https://zhuanlan.zhihu.com/p/34193549)\n\n\n","source":"_posts/webpack_hotModuleReplacement原理.md","raw":"---\ntitle: WEBPACK HMR 原理 \ntype: webpack\n---\n## 为什么要开启hmr\n方便开发，代码更新后不需要手动刷新前端页面\n## 如何开启hmr\n1. webpack 配置\n```javascript\nmodule.exports = {\n    devServer: {\n        contentBase: path.resolve(__dirname, './dist'), // 设置静态资源目录\n        hot: true, // 是否开启hmr\n        port: 7000,\n        host: '127.0.0.1'\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ]\n}\n```\n除此之外还需要在代码中\n```javascript\nif (module.hot) {\n    module.hot.accept('./a.js', () => {\n        ...\n    })\n}\n```\n以上代码告诉webpack对./a.js进行监听 修改./a.js 会触发hmr\n当然实际开发过程中不会这样处理都是借助第三方的插件\n以react为例 需要react-hot-loader 插件\nbabel的配置文件在.babelrc\n```javascript\n\"plugins\": [\n    \"react-hot-loader/babel\"\n]\n```\n\n## hmr 原理\n```seq\nCompiler -> Server: 不同的编译阶段通知Server\nServer -> client: 把编译进度告诉client\nclient -> devServer: 通过emitter 推送webpackHotUpdate\ndevServer -> bundle: 调用bundle 的hotCheck方法\nbundle -> bundle: 请求新模块的内容 通过script引入\n\n```\nnode_modules/webpack-dev-server/lib/Server.js\n```javascript\n    const { compile, invalid, done } = compiler.hooks;\n    ...\n    done.tap('webpack-dev-server', (stats) => {\n        this._sendStats(this.sockets, this.getStats(stats)); // \n        this._stats = stats;\n    });\n```\n基于webpack compiler 生命周期通过this.sockWrite发送消息到client端\n```javascript\n    this.sockWrite(sockets, 'hash', stats.hash);\n\n    if (stats.errors.length > 0) {\n      this.sockWrite(sockets, 'errors', stats.errors);\n    } else if (stats.warnings.length > 0) {\n      this.sockWrite(sockets, 'warnings', stats.warnings);\n    } else {\n      this.sockWrite(sockets, 'ok');\n    }\n```\n\nnode_modules/webpack-dev-server/client/index.js\n接受来自Server.js \b的sock的信息 在ok 和 warnings 调用reloadApp方法\n\n```javascript\n    var hotEmitter = require('webpack/hot/emitter');\n\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n\n```\n主要通过hotEmitter 和 node_modules/webpack/hot/dev-server.js 交互\n```javascript\n    var hotEmitter = require(\"./emitter\");\n\thotEmitter.on(\"webpackHotUpdate\", function (currentHash) {\n\t\tlastHash = currentHash;\n\t\tif (!upToDate() && module.hot.status() === \"idle\") {\n\t\t\tlog(\"info\", \"[HMR] Checking for updates on the server...\");\n\t\t\tcheck();\n\t\t}\n\t});\n```\n\n```javascript\n    module.hot\n\t\t\t.check(true)\n```\n这里的module.hot 由bundle.js createModuleHotObject创建 module.hot.check(true) 调用\n\n```javascript\n    function hotCheck(applyOnUpdate) {\n        ...\n        return __webpack_require__.hmrM().then(function (update) {\n            ...\n        });\n    }\n```\n__webpack_require__.hmrM()主要通过fetch请求服务端数据\n```javascript\n    fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {\n        ...\n    // http://127.0.0.1:7000/main.a9229e35e308de66caf4.hot-update.json\n    // chunk id 加 hash 请求后端\n```\n```javascript\n{\n    c:['main'], // 当前需要更新的chunk\n    r:[],\n    m:[]\n}\n```\n\n返回结果调用\n```javascript\nObject.keys(__webpack_require__.hmrC).reduce(function (\n    promises,\n    key // 值为jsonp\n) {\n    // 所以调用的是\n    __webpack_require__.hmrC[key](\n        update.c,\n        update.r,\n        update.m,\n    );\n    return promises;\n}\n[])\n// update 就是返回结果\n```\n\n遍历chunkIds 当installedChunks 中包含chunkId 时调用loadUpdateChunk\n```javascript\n__webpack_require__.hmrC.jsonp = function (\n    chunkIds,\n    ...\n) {\n    ...\n    chunkIds.forEach(function (chunkId) {\n        if (\n            __webpack_require__.o(installedChunks, chunkId) &&\n            installedChunks[chunkId] !== undefined\n        ) {\n            promises.push(loadUpdateChunk(chunkId, updatedModulesList));\n            currentUpdateChunks[chunkId] = true;\n        }\n    });\n};\n```\n\nloadUpdateChunk 通过__webpack_require__.l 创建script标签引入更新的模块\n```javascript\n...\nreturn new Promise((resolve, reject) => {\n    \n    waitingUpdateResolves[chunkId] = resolve;\n    ...\n\n```\n每次调用loadUpdateChunk返回一个Promise 以waitingUpdateResolves 收集resolve 当本次更新完成执行resolve\n```javascript\nself[\"webpackHotUpdatehmr\"] = (chunkId, moreModules, runtime) => {\n    ...\n    if (runtime) currentUpdateRuntime.push(runtime);\n    /******/\n    if (waitingUpdateResolves[chunkId]) {\n        /******/\n        waitingUpdateResolves[chunkId]();\n        /******/\n        waitingUpdateResolves[chunkId] = undefined;\n        /******/\n    }\n    /******/\n};\n```\nbundle.js 声明webpackHotUpdatehmr 方法 当__webpack_require__.l 引入新内容并成功加载时触发\n```javascript\nself[\"webpackHotUpdatehmr\"](\"main\",{\n      \"./src/a.js\":\n      ((module, __unused_webpack_exports, __webpack_require__) => {\n        eval(\"const b = __webpack_require__(/*! ./b */ \\\"./src/b.js\\\")\\nmodule.exports = {\\n    a: 'abcdedfd',\\n    b: b\\n}\\n\\n//# sourceURL=webpack://hmr/./src/a.js?\");\n     })\n\n},\n...\n);\n```\n当所有的更新资源加载完成时调用hotCheck 中的如下代码\n```javascript\nreturn Promise.all(\n    Object.keys(__webpack_require__.hmrC).reduce(function (\n            promises,\n            key\n        ) {\n            // 这里执行的是__webpack_require__.hmrC.jsonp\n            __webpack_require__.hmrC[key](\n                update.c,\n                update.r,\n                update.m,\n                promises, // promises.push(loadUpdateChunk(chunkId, updatedModulesList));\n                ...\n            );\n            return promises;\n        },\n        [])\n).then(function () {\n    return waitForBlockingPromises(function () {\n        if (applyOnUpdate) {\n            return internalApply(applyOnUpdate);\n        } else {\n            setStatus(\"ready\");\n            return updatedModules;\n        }\n    });\n});\n```\n\n```javascript\nfunction internalApply(options) {\n    results.forEach(function (result) {\n        if (result.apply) {\n            var modules = result.apply(reportError); \n            ...\n        }\n    });\n}\n```\n\ninternalApply 调用result.apply 方法执行在代码中添加的回调 module.hot.accept('./a.js', () => {}) 做到更新页面的效果\nresult.apply 调用 applyHandler\n```javascript\nfunction applyHandler(options) {\n    return {\n        dispose:() => {},\n        apply: () => {\n            ...\n            var acceptCallback = module.hot._acceptedDependencies[dependency];\n            if (acceptCallback) {\n                callbacks.push(acceptCallback);\n            }\n            for (var k = 0; k < callbacks.length; k++) {\n                callbacks[k].call(); // 执行回调里面的逻辑\n            }\n            ...\n        }\n    }\n}\n```\n\n\n\n## 关于react状态保存\n单纯的hmr就是更新通知，请求新模块代码 通过script动态引入。无法做到react开发过程中对状态保存。\n[react 状态保存原理](https://zhuanlan.zhihu.com/p/34193549)\n\n\n","slug":"webpack_hotModuleReplacement原理","published":1,"date":"2021-07-12T03:33:00.641Z","updated":"2021-07-12T03:33:00.641Z","_id":"ckr02hch70000rs056ruea4fx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要开启hmr\"><a href=\"#为什么要开启hmr\" class=\"headerlink\" title=\"为什么要开启hmr\"></a>为什么要开启hmr</h2><p>方便开发，代码更新后不需要手动刷新前端页面</p>\n<h2 id=\"如何开启hmr\"><a href=\"#如何开启hmr\" class=\"headerlink\" title=\"如何开启hmr\"></a>如何开启hmr</h2><ol>\n<li>webpack 配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>), <span class=\"comment\">// 设置静态资源目录</span></span><br><span class=\"line\">        hot: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启hmr</span></span><br><span class=\"line\">        port: <span class=\"number\">7000</span>,</span><br><span class=\"line\">        host: <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n除此之外还需要在代码中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.hot) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.hot.accept(<span class=\"string\">&#x27;./a.js&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n以上代码告诉webpack对./a.js进行监听 修改./a.js 会触发hmr<br>当然实际开发过程中不会这样处理都是借助第三方的插件<br>以react为例 需要react-hot-loader 插件<br>babel的配置文件在.babelrc<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;plugins&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;react-hot-loader/babel&quot;</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"hmr-原理\"><a href=\"#hmr-原理\" class=\"headerlink\" title=\"hmr 原理\"></a>hmr 原理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiler -&gt; Server: 不同的编译阶段通知Server</span><br><span class=\"line\">Server -&gt; client: 把编译进度告诉client</span><br><span class=\"line\">client -&gt; devServer: 通过emitter 推送webpackHotUpdate</span><br><span class=\"line\">devServer -&gt; bundle: 调用bundle 的hotCheck方法</span><br><span class=\"line\">bundle -&gt; bundle: 请求新模块的内容 通过script引入</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>node_modules/webpack-dev-server/lib/Server.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; compile, invalid, done &#125; = compiler.hooks;</span><br><span class=\"line\">...</span><br><span class=\"line\">done.tap(<span class=\"string\">&#x27;webpack-dev-server&#x27;</span>, <span class=\"function\">(<span class=\"params\">stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._sendStats(<span class=\"built_in\">this</span>.sockets, <span class=\"built_in\">this</span>.getStats(stats)); <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._stats = stats;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>基于webpack compiler 生命周期通过this.sockWrite发送消息到client端</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.sockWrite(sockets, <span class=\"string\">&#x27;hash&#x27;</span>, stats.hash);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (stats.errors.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sockWrite(sockets, <span class=\"string\">&#x27;errors&#x27;</span>, stats.errors);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stats.warnings.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sockWrite(sockets, <span class=\"string\">&#x27;warnings&#x27;</span>, stats.warnings);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sockWrite(sockets, <span class=\"string\">&#x27;ok&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>node_modules/webpack-dev-server/client/index.js<br>接受来自Server.js \b的sock的信息 在ok 和 warnings 调用reloadApp方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hotEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack/hot/emitter&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hotEmitter.emit(<span class=\"string\">&#x27;webpackHotUpdate&#x27;</span>, currentHash);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>主要通过hotEmitter 和 node_modules/webpack/hot/dev-server.js 交互</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> hotEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./emitter&quot;</span>);</span><br><span class=\"line\">hotEmitter.on(<span class=\"string\">&quot;webpackHotUpdate&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">currentHash</span>) </span>&#123;</span><br><span class=\"line\">\tlastHash = currentHash;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!upToDate() &amp;&amp; <span class=\"built_in\">module</span>.hot.status() === <span class=\"string\">&quot;idle&quot;</span>) &#123;</span><br><span class=\"line\">\t\tlog(<span class=\"string\">&quot;info&quot;</span>, <span class=\"string\">&quot;[HMR] Checking for updates on the server...&quot;</span>);</span><br><span class=\"line\">\t\tcheck();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">module</span>.hot</span><br><span class=\"line\">.check(<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<p>这里的module.hot 由bundle.js createModuleHotObject创建 module.hot.check(true) 调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hotCheck</span>(<span class=\"params\">applyOnUpdate</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> __webpack_require__.hmrM().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">update</span>) </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>__webpack_require__.hmrM()主要通过fetch请求服务端数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(__webpack_require__.p + __webpack_require__.hmrF()).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"comment\">// http://127.0.0.1:7000/main.a9229e35e308de66caf4.hot-update.json</span></span><br><span class=\"line\"><span class=\"comment\">// chunk id 加 hash 请求后端</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    c:[<span class=\"string\">&#x27;main&#x27;</span>], <span class=\"comment\">// 当前需要更新的chunk</span></span><br><span class=\"line\">    r:[],</span><br><span class=\"line\">    m:[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回结果调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(__webpack_require__.hmrC).reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    promises,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    key <span class=\"comment\">// 值为jsonp</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所以调用的是</span></span><br><span class=\"line\">    __webpack_require__.hmrC[key](</span><br><span class=\"line\">        update.c,</span><br><span class=\"line\">        update.r,</span><br><span class=\"line\">        update.m,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promises;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[])</span><br><span class=\"line\"><span class=\"comment\">// update 就是返回结果</span></span><br></pre></td></tr></table></figure>\n\n<p>遍历chunkIds 当installedChunks 中包含chunkId 时调用loadUpdateChunk</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_require__.hmrC.jsonp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    chunkIds,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ...</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    chunkIds.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunkId</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            __webpack_require__.o(installedChunks, chunkId) &amp;&amp;</span><br><span class=\"line\">            installedChunks[chunkId] !== <span class=\"literal\">undefined</span></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            promises.push(loadUpdateChunk(chunkId, updatedModulesList));</span><br><span class=\"line\">            currentUpdateChunks[chunkId] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>loadUpdateChunk 通过__webpack_require__.l 创建script标签引入更新的模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    waitingUpdateResolves[chunkId] = resolve;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>每次调用loadUpdateChunk返回一个Promise 以waitingUpdateResolves 收集resolve 当本次更新完成执行resolve</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self[<span class=\"string\">&quot;webpackHotUpdatehmr&quot;</span>] = <span class=\"function\">(<span class=\"params\">chunkId, moreModules, runtime</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (runtime) currentUpdateRuntime.push(runtime);</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waitingUpdateResolves[chunkId]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">        waitingUpdateResolves[chunkId]();</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">        waitingUpdateResolves[chunkId] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>bundle.js 声明webpackHotUpdatehmr 方法 当__webpack_require__.l 引入新内容并成功加载时触发</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self[<span class=\"string\">&quot;webpackHotUpdatehmr&quot;</span>](<span class=\"string\">&quot;main&quot;</span>,&#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;./src/a.js&quot;</span>:</span><br><span class=\"line\">      (<span class=\"function\">(<span class=\"params\"><span class=\"built_in\">module</span>, __unused_webpack_exports, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eval</span>(<span class=\"string\">&quot;const b = __webpack_require__(/*! ./b */ \\&quot;./src/b.js\\&quot;)\\nmodule.exports = &#123;\\n    a: &#x27;abcdedfd&#x27;,\\n    b: b\\n&#125;\\n\\n//# sourceURL=webpack://hmr/./src/a.js?&quot;</span>);</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当所有的更新资源加载完成时调用hotCheck 中的如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(__webpack_require__.hmrC).reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            promises,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            key</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里执行的是__webpack_require__.hmrC.jsonp</span></span><br><span class=\"line\">            __webpack_require__.hmrC[key](</span><br><span class=\"line\">                update.c,</span><br><span class=\"line\">                update.r,</span><br><span class=\"line\">                update.m,</span><br><span class=\"line\">                promises, <span class=\"comment\">// promises.push(loadUpdateChunk(chunkId, updatedModulesList));</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promises;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [])</span><br><span class=\"line\">).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> waitForBlockingPromises(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (applyOnUpdate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> internalApply(applyOnUpdate);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            setStatus(<span class=\"string\">&quot;ready&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> updatedModules;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">internalApply</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    results.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.apply) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> modules = result.apply(reportError); </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>internalApply 调用result.apply 方法执行在代码中添加的回调 module.hot.accept(‘./a.js’, () =&gt; {}) 做到更新页面的效果<br>result.apply 调用 applyHandler</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyHandler</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        dispose:<span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">        apply: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">var</span> acceptCallback = <span class=\"built_in\">module</span>.hot._acceptedDependencies[dependency];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (acceptCallback) &#123;</span><br><span class=\"line\">                callbacks.push(acceptCallback);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; callbacks.length; k++) &#123;</span><br><span class=\"line\">                callbacks[k].call(); <span class=\"comment\">// 执行回调里面的逻辑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关于react状态保存\"><a href=\"#关于react状态保存\" class=\"headerlink\" title=\"关于react状态保存\"></a>关于react状态保存</h2><p>单纯的hmr就是更新通知，请求新模块代码 通过script动态引入。无法做到react开发过程中对状态保存。<br><a href=\"https://zhuanlan.zhihu.com/p/34193549\">react 状态保存原理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要开启hmr\"><a href=\"#为什么要开启hmr\" class=\"headerlink\" title=\"为什么要开启hmr\"></a>为什么要开启hmr</h2><p>方便开发，代码更新后不需要手动刷新前端页面</p>\n<h2 id=\"如何开启hmr\"><a href=\"#如何开启hmr\" class=\"headerlink\" title=\"如何开启hmr\"></a>如何开启hmr</h2><ol>\n<li>webpack 配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: path.resolve(__dirname, <span class=\"string\">&#x27;./dist&#x27;</span>), <span class=\"comment\">// 设置静态资源目录</span></span><br><span class=\"line\">        hot: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启hmr</span></span><br><span class=\"line\">        port: <span class=\"number\">7000</span>,</span><br><span class=\"line\">        host: <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n除此之外还需要在代码中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.hot) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.hot.accept(<span class=\"string\">&#x27;./a.js&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n以上代码告诉webpack对./a.js进行监听 修改./a.js 会触发hmr<br>当然实际开发过程中不会这样处理都是借助第三方的插件<br>以react为例 需要react-hot-loader 插件<br>babel的配置文件在.babelrc<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;plugins&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;react-hot-loader/babel&quot;</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"hmr-原理\"><a href=\"#hmr-原理\" class=\"headerlink\" title=\"hmr 原理\"></a>hmr 原理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiler -&gt; Server: 不同的编译阶段通知Server</span><br><span class=\"line\">Server -&gt; client: 把编译进度告诉client</span><br><span class=\"line\">client -&gt; devServer: 通过emitter 推送webpackHotUpdate</span><br><span class=\"line\">devServer -&gt; bundle: 调用bundle 的hotCheck方法</span><br><span class=\"line\">bundle -&gt; bundle: 请求新模块的内容 通过script引入</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>node_modules/webpack-dev-server/lib/Server.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; compile, invalid, done &#125; = compiler.hooks;</span><br><span class=\"line\">...</span><br><span class=\"line\">done.tap(<span class=\"string\">&#x27;webpack-dev-server&#x27;</span>, <span class=\"function\">(<span class=\"params\">stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._sendStats(<span class=\"built_in\">this</span>.sockets, <span class=\"built_in\">this</span>.getStats(stats)); <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._stats = stats;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>基于webpack compiler 生命周期通过this.sockWrite发送消息到client端</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.sockWrite(sockets, <span class=\"string\">&#x27;hash&#x27;</span>, stats.hash);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (stats.errors.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sockWrite(sockets, <span class=\"string\">&#x27;errors&#x27;</span>, stats.errors);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stats.warnings.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sockWrite(sockets, <span class=\"string\">&#x27;warnings&#x27;</span>, stats.warnings);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sockWrite(sockets, <span class=\"string\">&#x27;ok&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>node_modules/webpack-dev-server/client/index.js<br>接受来自Server.js \b的sock的信息 在ok 和 warnings 调用reloadApp方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hotEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack/hot/emitter&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hotEmitter.emit(<span class=\"string\">&#x27;webpackHotUpdate&#x27;</span>, currentHash);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>主要通过hotEmitter 和 node_modules/webpack/hot/dev-server.js 交互</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> hotEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./emitter&quot;</span>);</span><br><span class=\"line\">hotEmitter.on(<span class=\"string\">&quot;webpackHotUpdate&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">currentHash</span>) </span>&#123;</span><br><span class=\"line\">\tlastHash = currentHash;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!upToDate() &amp;&amp; <span class=\"built_in\">module</span>.hot.status() === <span class=\"string\">&quot;idle&quot;</span>) &#123;</span><br><span class=\"line\">\t\tlog(<span class=\"string\">&quot;info&quot;</span>, <span class=\"string\">&quot;[HMR] Checking for updates on the server...&quot;</span>);</span><br><span class=\"line\">\t\tcheck();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">module</span>.hot</span><br><span class=\"line\">.check(<span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<p>这里的module.hot 由bundle.js createModuleHotObject创建 module.hot.check(true) 调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hotCheck</span>(<span class=\"params\">applyOnUpdate</span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> __webpack_require__.hmrM().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">update</span>) </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>__webpack_require__.hmrM()主要通过fetch请求服务端数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(__webpack_require__.p + __webpack_require__.hmrF()).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"comment\">// http://127.0.0.1:7000/main.a9229e35e308de66caf4.hot-update.json</span></span><br><span class=\"line\"><span class=\"comment\">// chunk id 加 hash 请求后端</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    c:[<span class=\"string\">&#x27;main&#x27;</span>], <span class=\"comment\">// 当前需要更新的chunk</span></span><br><span class=\"line\">    r:[],</span><br><span class=\"line\">    m:[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回结果调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(__webpack_require__.hmrC).reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    promises,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    key <span class=\"comment\">// 值为jsonp</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所以调用的是</span></span><br><span class=\"line\">    __webpack_require__.hmrC[key](</span><br><span class=\"line\">        update.c,</span><br><span class=\"line\">        update.r,</span><br><span class=\"line\">        update.m,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promises;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[])</span><br><span class=\"line\"><span class=\"comment\">// update 就是返回结果</span></span><br></pre></td></tr></table></figure>\n\n<p>遍历chunkIds 当installedChunks 中包含chunkId 时调用loadUpdateChunk</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_require__.hmrC.jsonp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    chunkIds,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ...</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    chunkIds.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunkId</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            __webpack_require__.o(installedChunks, chunkId) &amp;&amp;</span><br><span class=\"line\">            installedChunks[chunkId] !== <span class=\"literal\">undefined</span></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            promises.push(loadUpdateChunk(chunkId, updatedModulesList));</span><br><span class=\"line\">            currentUpdateChunks[chunkId] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>loadUpdateChunk 通过__webpack_require__.l 创建script标签引入更新的模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    waitingUpdateResolves[chunkId] = resolve;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>每次调用loadUpdateChunk返回一个Promise 以waitingUpdateResolves 收集resolve 当本次更新完成执行resolve</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self[<span class=\"string\">&quot;webpackHotUpdatehmr&quot;</span>] = <span class=\"function\">(<span class=\"params\">chunkId, moreModules, runtime</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (runtime) currentUpdateRuntime.push(runtime);</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waitingUpdateResolves[chunkId]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">        waitingUpdateResolves[chunkId]();</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">        waitingUpdateResolves[chunkId] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        <span class=\"comment\">/******/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/******/</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>bundle.js 声明webpackHotUpdatehmr 方法 当__webpack_require__.l 引入新内容并成功加载时触发</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self[<span class=\"string\">&quot;webpackHotUpdatehmr&quot;</span>](<span class=\"string\">&quot;main&quot;</span>,&#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;./src/a.js&quot;</span>:</span><br><span class=\"line\">      (<span class=\"function\">(<span class=\"params\"><span class=\"built_in\">module</span>, __unused_webpack_exports, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eval</span>(<span class=\"string\">&quot;const b = __webpack_require__(/*! ./b */ \\&quot;./src/b.js\\&quot;)\\nmodule.exports = &#123;\\n    a: &#x27;abcdedfd&#x27;,\\n    b: b\\n&#125;\\n\\n//# sourceURL=webpack://hmr/./src/a.js?&quot;</span>);</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当所有的更新资源加载完成时调用hotCheck 中的如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(__webpack_require__.hmrC).reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            promises,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            key</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里执行的是__webpack_require__.hmrC.jsonp</span></span><br><span class=\"line\">            __webpack_require__.hmrC[key](</span><br><span class=\"line\">                update.c,</span><br><span class=\"line\">                update.r,</span><br><span class=\"line\">                update.m,</span><br><span class=\"line\">                promises, <span class=\"comment\">// promises.push(loadUpdateChunk(chunkId, updatedModulesList));</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> promises;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        [])</span><br><span class=\"line\">).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> waitForBlockingPromises(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (applyOnUpdate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> internalApply(applyOnUpdate);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            setStatus(<span class=\"string\">&quot;ready&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> updatedModules;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">internalApply</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    results.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.apply) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> modules = result.apply(reportError); </span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>internalApply 调用result.apply 方法执行在代码中添加的回调 module.hot.accept(‘./a.js’, () =&gt; {}) 做到更新页面的效果<br>result.apply 调用 applyHandler</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyHandler</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        dispose:<span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">        apply: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">var</span> acceptCallback = <span class=\"built_in\">module</span>.hot._acceptedDependencies[dependency];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (acceptCallback) &#123;</span><br><span class=\"line\">                callbacks.push(acceptCallback);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; callbacks.length; k++) &#123;</span><br><span class=\"line\">                callbacks[k].call(); <span class=\"comment\">// 执行回调里面的逻辑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关于react状态保存\"><a href=\"#关于react状态保存\" class=\"headerlink\" title=\"关于react状态保存\"></a>关于react状态保存</h2><p>单纯的hmr就是更新通知，请求新模块代码 通过script动态引入。无法做到react开发过程中对状态保存。<br><a href=\"https://zhuanlan.zhihu.com/p/34193549\">react 状态保存原理</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}